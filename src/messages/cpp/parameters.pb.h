// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameters.proto

#ifndef PROTOBUF_parameters_2eproto__INCLUDED
#define PROTOBUF_parameters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_parameters_2eproto();
void protobuf_AssignDesc_parameters_2eproto();
void protobuf_ShutdownFile_parameters_2eproto();

class Details;
class ParameterConfig;
class ParameterDetails;
class ParameterBasicInfo;
class Parameter;

// ===================================================================

class Details : public ::google::protobuf::MessageLite {
 public:
  Details();
  virtual ~Details();

  Details(const Details& from);

  inline Details& operator=(const Details& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Details& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Details* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Details* other);

  // implements Message ----------------------------------------------

  Details* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Details& from);
  void MergeFrom(const Details& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional fixed64 creationDate = 3;
  inline bool has_creationdate() const;
  inline void clear_creationdate();
  static const int kCreationDateFieldNumber = 3;
  inline ::google::protobuf::uint64 creationdate() const;
  inline void set_creationdate(::google::protobuf::uint64 value);

  // optional fixed64 lastupdate = 4;
  inline bool has_lastupdate() const;
  inline void clear_lastupdate();
  static const int kLastupdateFieldNumber = 4;
  inline ::google::protobuf::uint64 lastupdate() const;
  inline void set_lastupdate(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:protbuf.Details)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_creationdate();
  inline void clear_has_creationdate();
  inline void set_has_lastupdate();
  inline void clear_has_lastupdate();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::google::protobuf::uint64 creationdate_;
  ::google::protobuf::uint64 lastupdate_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static Details* default_instance_;
};
// -------------------------------------------------------------------

class ParameterConfig : public ::google::protobuf::MessageLite {
 public:
  ParameterConfig();
  virtual ~ParameterConfig();

  ParameterConfig(const ParameterConfig& from);

  inline ParameterConfig& operator=(const ParameterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ParameterConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ParameterConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ParameterConfig* other);

  // implements Message ----------------------------------------------

  ParameterConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ParameterConfig& from);
  void MergeFrom(const ParameterConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes defaultValue = 2;
  inline bool has_defaultvalue() const;
  inline void clear_defaultvalue();
  static const int kDefaultValueFieldNumber = 2;
  inline const ::std::string& defaultvalue() const;
  inline void set_defaultvalue(const ::std::string& value);
  inline void set_defaultvalue(const char* value);
  inline void set_defaultvalue(const void* value, size_t size);
  inline ::std::string* mutable_defaultvalue();
  inline ::std::string* release_defaultvalue();
  inline void set_allocated_defaultvalue(::std::string* defaultvalue);

  // optional bytes minValue = 3;
  inline bool has_minvalue() const;
  inline void clear_minvalue();
  static const int kMinValueFieldNumber = 3;
  inline const ::std::string& minvalue() const;
  inline void set_minvalue(const ::std::string& value);
  inline void set_minvalue(const char* value);
  inline void set_minvalue(const void* value, size_t size);
  inline ::std::string* mutable_minvalue();
  inline ::std::string* release_minvalue();
  inline void set_allocated_minvalue(::std::string* minvalue);

  // optional bytes maxValue = 4;
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxValueFieldNumber = 4;
  inline const ::std::string& maxvalue() const;
  inline void set_maxvalue(const ::std::string& value);
  inline void set_maxvalue(const char* value);
  inline void set_maxvalue(const void* value, size_t size);
  inline ::std::string* mutable_maxvalue();
  inline ::std::string* release_maxvalue();
  inline void set_allocated_maxvalue(::std::string* maxvalue);

  // optional int32 minLength = 5;
  inline bool has_minlength() const;
  inline void clear_minlength();
  static const int kMinLengthFieldNumber = 5;
  inline ::google::protobuf::int32 minlength() const;
  inline void set_minlength(::google::protobuf::int32 value);

  // optional int32 maxLength = 6;
  inline bool has_maxlength() const;
  inline void clear_maxlength();
  static const int kMaxLengthFieldNumber = 6;
  inline ::google::protobuf::int32 maxlength() const;
  inline void set_maxlength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protbuf.ParameterConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_defaultvalue();
  inline void clear_has_defaultvalue();
  inline void set_has_minvalue();
  inline void clear_has_minvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();
  inline void set_has_minlength();
  inline void clear_has_minlength();
  inline void set_has_maxlength();
  inline void clear_has_maxlength();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* defaultvalue_;
  ::std::string* minvalue_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 minlength_;
  ::std::string* maxvalue_;
  ::google::protobuf::int32 maxlength_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterConfig* default_instance_;
};
// -------------------------------------------------------------------

class ParameterDetails : public ::google::protobuf::MessageLite {
 public:
  ParameterDetails();
  virtual ~ParameterDetails();

  ParameterDetails(const ParameterDetails& from);

  inline ParameterDetails& operator=(const ParameterDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ParameterDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ParameterDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ParameterDetails* other);

  // implements Message ----------------------------------------------

  ParameterDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ParameterDetails& from);
  void MergeFrom(const ParameterDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:protbuf.ParameterDetails)
 private:
  inline void set_has_description();
  inline void clear_has_description();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterDetails* default_instance_;
};
// -------------------------------------------------------------------

class ParameterBasicInfo : public ::google::protobuf::MessageLite {
 public:
  ParameterBasicInfo();
  virtual ~ParameterBasicInfo();

  ParameterBasicInfo(const ParameterBasicInfo& from);

  inline ParameterBasicInfo& operator=(const ParameterBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ParameterBasicInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ParameterBasicInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ParameterBasicInfo* other);

  // implements Message ----------------------------------------------

  ParameterBasicInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ParameterBasicInfo& from);
  void MergeFrom(const ParameterBasicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string symbol = 3;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:protbuf.ParameterBasicInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* symbol_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::MessageLite {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Parameter& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Parameter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  Parameter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protbuf.ParameterBasicInfo basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::protbuf::ParameterBasicInfo& basic() const;
  inline ::protbuf::ParameterBasicInfo* mutable_basic();
  inline ::protbuf::ParameterBasicInfo* release_basic();
  inline void set_allocated_basic(::protbuf::ParameterBasicInfo* basic);

  // required .protbuf.Details details = 2;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::protbuf::Details& details() const;
  inline ::protbuf::Details* mutable_details();
  inline ::protbuf::Details* release_details();
  inline void set_allocated_details(::protbuf::Details* details);

  // required .protbuf.ParameterConfig config = 4;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 4;
  inline const ::protbuf::ParameterConfig& config() const;
  inline ::protbuf::ParameterConfig* mutable_config();
  inline ::protbuf::ParameterConfig* release_config();
  inline void set_allocated_config(::protbuf::ParameterConfig* config);

  // @@protoc_insertion_point(class_scope:protbuf.Parameter)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_details();
  inline void clear_has_details();
  inline void set_has_config();
  inline void clear_has_config();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::protbuf::ParameterBasicInfo* basic_;
  ::protbuf::Details* details_;
  ::protbuf::ParameterConfig* config_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// ===================================================================


// ===================================================================

// Details

// required string name = 1;
inline bool Details::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Details::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Details::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Details::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Details::name() const {
  // @@protoc_insertion_point(field_get:protbuf.Details.name)
  return *name_;
}
inline void Details::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.Details.name)
}
inline void Details::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.Details.name)
}
inline void Details::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.Details.name)
}
inline ::std::string* Details::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.Details.name)
  return name_;
}
inline ::std::string* Details::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Details::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Details.name)
}

// optional string description = 2;
inline bool Details::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Details::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Details::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Details::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Details::description() const {
  // @@protoc_insertion_point(field_get:protbuf.Details.description)
  return *description_;
}
inline void Details::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.Details.description)
}
inline void Details::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.Details.description)
}
inline void Details::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.Details.description)
}
inline ::std::string* Details::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.Details.description)
  return description_;
}
inline ::std::string* Details::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Details::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Details.description)
}

// optional fixed64 creationDate = 3;
inline bool Details::has_creationdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Details::set_has_creationdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Details::clear_has_creationdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Details::clear_creationdate() {
  creationdate_ = GOOGLE_ULONGLONG(0);
  clear_has_creationdate();
}
inline ::google::protobuf::uint64 Details::creationdate() const {
  // @@protoc_insertion_point(field_get:protbuf.Details.creationDate)
  return creationdate_;
}
inline void Details::set_creationdate(::google::protobuf::uint64 value) {
  set_has_creationdate();
  creationdate_ = value;
  // @@protoc_insertion_point(field_set:protbuf.Details.creationDate)
}

// optional fixed64 lastupdate = 4;
inline bool Details::has_lastupdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Details::set_has_lastupdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Details::clear_has_lastupdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Details::clear_lastupdate() {
  lastupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_lastupdate();
}
inline ::google::protobuf::uint64 Details::lastupdate() const {
  // @@protoc_insertion_point(field_get:protbuf.Details.lastupdate)
  return lastupdate_;
}
inline void Details::set_lastupdate(::google::protobuf::uint64 value) {
  set_has_lastupdate();
  lastupdate_ = value;
  // @@protoc_insertion_point(field_set:protbuf.Details.lastupdate)
}

// -------------------------------------------------------------------

// ParameterConfig

// required int32 type = 1;
inline bool ParameterConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ParameterConfig::type() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterConfig.type)
  return type_;
}
inline void ParameterConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ParameterConfig.type)
}

// optional bytes defaultValue = 2;
inline bool ParameterConfig::has_defaultvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParameterConfig::set_has_defaultvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParameterConfig::clear_has_defaultvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParameterConfig::clear_defaultvalue() {
  if (defaultvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defaultvalue_->clear();
  }
  clear_has_defaultvalue();
}
inline const ::std::string& ParameterConfig::defaultvalue() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterConfig.defaultValue)
  return *defaultvalue_;
}
inline void ParameterConfig::set_defaultvalue(const ::std::string& value) {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defaultvalue_ = new ::std::string;
  }
  defaultvalue_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ParameterConfig.defaultValue)
}
inline void ParameterConfig::set_defaultvalue(const char* value) {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defaultvalue_ = new ::std::string;
  }
  defaultvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ParameterConfig.defaultValue)
}
inline void ParameterConfig::set_defaultvalue(const void* value, size_t size) {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defaultvalue_ = new ::std::string;
  }
  defaultvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ParameterConfig.defaultValue)
}
inline ::std::string* ParameterConfig::mutable_defaultvalue() {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defaultvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ParameterConfig.defaultValue)
  return defaultvalue_;
}
inline ::std::string* ParameterConfig::release_defaultvalue() {
  clear_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = defaultvalue_;
    defaultvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParameterConfig::set_allocated_defaultvalue(::std::string* defaultvalue) {
  if (defaultvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defaultvalue_;
  }
  if (defaultvalue) {
    set_has_defaultvalue();
    defaultvalue_ = defaultvalue;
  } else {
    clear_has_defaultvalue();
    defaultvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ParameterConfig.defaultValue)
}

// optional bytes minValue = 3;
inline bool ParameterConfig::has_minvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParameterConfig::set_has_minvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParameterConfig::clear_has_minvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParameterConfig::clear_minvalue() {
  if (minvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minvalue_->clear();
  }
  clear_has_minvalue();
}
inline const ::std::string& ParameterConfig::minvalue() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterConfig.minValue)
  return *minvalue_;
}
inline void ParameterConfig::set_minvalue(const ::std::string& value) {
  set_has_minvalue();
  if (minvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minvalue_ = new ::std::string;
  }
  minvalue_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ParameterConfig.minValue)
}
inline void ParameterConfig::set_minvalue(const char* value) {
  set_has_minvalue();
  if (minvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minvalue_ = new ::std::string;
  }
  minvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ParameterConfig.minValue)
}
inline void ParameterConfig::set_minvalue(const void* value, size_t size) {
  set_has_minvalue();
  if (minvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minvalue_ = new ::std::string;
  }
  minvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ParameterConfig.minValue)
}
inline ::std::string* ParameterConfig::mutable_minvalue() {
  set_has_minvalue();
  if (minvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    minvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ParameterConfig.minValue)
  return minvalue_;
}
inline ::std::string* ParameterConfig::release_minvalue() {
  clear_has_minvalue();
  if (minvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = minvalue_;
    minvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParameterConfig::set_allocated_minvalue(::std::string* minvalue) {
  if (minvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete minvalue_;
  }
  if (minvalue) {
    set_has_minvalue();
    minvalue_ = minvalue;
  } else {
    clear_has_minvalue();
    minvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ParameterConfig.minValue)
}

// optional bytes maxValue = 4;
inline bool ParameterConfig::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParameterConfig::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParameterConfig::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParameterConfig::clear_maxvalue() {
  if (maxvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maxvalue_->clear();
  }
  clear_has_maxvalue();
}
inline const ::std::string& ParameterConfig::maxvalue() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterConfig.maxValue)
  return *maxvalue_;
}
inline void ParameterConfig::set_maxvalue(const ::std::string& value) {
  set_has_maxvalue();
  if (maxvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maxvalue_ = new ::std::string;
  }
  maxvalue_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ParameterConfig.maxValue)
}
inline void ParameterConfig::set_maxvalue(const char* value) {
  set_has_maxvalue();
  if (maxvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maxvalue_ = new ::std::string;
  }
  maxvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ParameterConfig.maxValue)
}
inline void ParameterConfig::set_maxvalue(const void* value, size_t size) {
  set_has_maxvalue();
  if (maxvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maxvalue_ = new ::std::string;
  }
  maxvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ParameterConfig.maxValue)
}
inline ::std::string* ParameterConfig::mutable_maxvalue() {
  set_has_maxvalue();
  if (maxvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    maxvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ParameterConfig.maxValue)
  return maxvalue_;
}
inline ::std::string* ParameterConfig::release_maxvalue() {
  clear_has_maxvalue();
  if (maxvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = maxvalue_;
    maxvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParameterConfig::set_allocated_maxvalue(::std::string* maxvalue) {
  if (maxvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete maxvalue_;
  }
  if (maxvalue) {
    set_has_maxvalue();
    maxvalue_ = maxvalue;
  } else {
    clear_has_maxvalue();
    maxvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ParameterConfig.maxValue)
}

// optional int32 minLength = 5;
inline bool ParameterConfig::has_minlength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParameterConfig::set_has_minlength() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParameterConfig::clear_has_minlength() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParameterConfig::clear_minlength() {
  minlength_ = 0;
  clear_has_minlength();
}
inline ::google::protobuf::int32 ParameterConfig::minlength() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterConfig.minLength)
  return minlength_;
}
inline void ParameterConfig::set_minlength(::google::protobuf::int32 value) {
  set_has_minlength();
  minlength_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ParameterConfig.minLength)
}

// optional int32 maxLength = 6;
inline bool ParameterConfig::has_maxlength() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParameterConfig::set_has_maxlength() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParameterConfig::clear_has_maxlength() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParameterConfig::clear_maxlength() {
  maxlength_ = 0;
  clear_has_maxlength();
}
inline ::google::protobuf::int32 ParameterConfig::maxlength() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterConfig.maxLength)
  return maxlength_;
}
inline void ParameterConfig::set_maxlength(::google::protobuf::int32 value) {
  set_has_maxlength();
  maxlength_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ParameterConfig.maxLength)
}

// -------------------------------------------------------------------

// ParameterDetails

// optional string description = 1;
inline bool ParameterDetails::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterDetails::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterDetails::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterDetails::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ParameterDetails::description() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterDetails.description)
  return *description_;
}
inline void ParameterDetails::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ParameterDetails.description)
}
inline void ParameterDetails::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ParameterDetails.description)
}
inline void ParameterDetails::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ParameterDetails.description)
}
inline ::std::string* ParameterDetails::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ParameterDetails.description)
  return description_;
}
inline ::std::string* ParameterDetails::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParameterDetails::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ParameterDetails.description)
}

// -------------------------------------------------------------------

// ParameterBasicInfo

// required uint32 id = 1;
inline bool ParameterBasicInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterBasicInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterBasicInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterBasicInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ParameterBasicInfo::id() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterBasicInfo.id)
  return id_;
}
inline void ParameterBasicInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ParameterBasicInfo.id)
}

// optional string name = 2;
inline bool ParameterBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParameterBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParameterBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParameterBasicInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParameterBasicInfo::name() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterBasicInfo.name)
  return *name_;
}
inline void ParameterBasicInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ParameterBasicInfo.name)
}
inline void ParameterBasicInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ParameterBasicInfo.name)
}
inline void ParameterBasicInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ParameterBasicInfo.name)
}
inline ::std::string* ParameterBasicInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ParameterBasicInfo.name)
  return name_;
}
inline ::std::string* ParameterBasicInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParameterBasicInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ParameterBasicInfo.name)
}

// optional string symbol = 3;
inline bool ParameterBasicInfo::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParameterBasicInfo::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParameterBasicInfo::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParameterBasicInfo::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& ParameterBasicInfo::symbol() const {
  // @@protoc_insertion_point(field_get:protbuf.ParameterBasicInfo.symbol)
  return *symbol_;
}
inline void ParameterBasicInfo::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ParameterBasicInfo.symbol)
}
inline void ParameterBasicInfo::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ParameterBasicInfo.symbol)
}
inline void ParameterBasicInfo::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ParameterBasicInfo.symbol)
}
inline ::std::string* ParameterBasicInfo::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ParameterBasicInfo.symbol)
  return symbol_;
}
inline ::std::string* ParameterBasicInfo::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParameterBasicInfo::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ParameterBasicInfo.symbol)
}

// -------------------------------------------------------------------

// Parameter

// required .protbuf.ParameterBasicInfo basic = 1;
inline bool Parameter::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameter::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameter::clear_basic() {
  if (basic_ != NULL) basic_->::protbuf::ParameterBasicInfo::Clear();
  clear_has_basic();
}
inline const ::protbuf::ParameterBasicInfo& Parameter::basic() const {
  // @@protoc_insertion_point(field_get:protbuf.Parameter.basic)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return basic_ != NULL ? *basic_ : *default_instance().basic_;
#else
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
#endif
}
inline ::protbuf::ParameterBasicInfo* Parameter::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::protbuf::ParameterBasicInfo;
  // @@protoc_insertion_point(field_mutable:protbuf.Parameter.basic)
  return basic_;
}
inline ::protbuf::ParameterBasicInfo* Parameter::release_basic() {
  clear_has_basic();
  ::protbuf::ParameterBasicInfo* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void Parameter::set_allocated_basic(::protbuf::ParameterBasicInfo* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Parameter.basic)
}

// required .protbuf.Details details = 2;
inline bool Parameter::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameter::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameter::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameter::clear_details() {
  if (details_ != NULL) details_->::protbuf::Details::Clear();
  clear_has_details();
}
inline const ::protbuf::Details& Parameter::details() const {
  // @@protoc_insertion_point(field_get:protbuf.Parameter.details)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return details_ != NULL ? *details_ : *default_instance().details_;
#else
  return details_ != NULL ? *details_ : *default_instance_->details_;
#endif
}
inline ::protbuf::Details* Parameter::mutable_details() {
  set_has_details();
  if (details_ == NULL) details_ = new ::protbuf::Details;
  // @@protoc_insertion_point(field_mutable:protbuf.Parameter.details)
  return details_;
}
inline ::protbuf::Details* Parameter::release_details() {
  clear_has_details();
  ::protbuf::Details* temp = details_;
  details_ = NULL;
  return temp;
}
inline void Parameter::set_allocated_details(::protbuf::Details* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Parameter.details)
}

// required .protbuf.ParameterConfig config = 4;
inline bool Parameter::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameter::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameter::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameter::clear_config() {
  if (config_ != NULL) config_->::protbuf::ParameterConfig::Clear();
  clear_has_config();
}
inline const ::protbuf::ParameterConfig& Parameter::config() const {
  // @@protoc_insertion_point(field_get:protbuf.Parameter.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
inline ::protbuf::ParameterConfig* Parameter::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::protbuf::ParameterConfig;
  // @@protoc_insertion_point(field_mutable:protbuf.Parameter.config)
  return config_;
}
inline ::protbuf::ParameterConfig* Parameter::release_config() {
  clear_has_config();
  ::protbuf::ParameterConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void Parameter::set_allocated_config(::protbuf::ParameterConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Parameter.config)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parameters_2eproto__INCLUDED
