// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_conteiner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_conteiner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

void protobuf_ShutdownFile_message_5fconteiner_2eproto() {
  delete MessageFrame::default_instance_;
  delete ResponseCode::default_instance_;
  delete FilterComponent::default_instance_;
  delete Filter::default_instance_;
  delete Limits::default_instance_;
  delete OrderBy::default_instance_;
  delete MessageCapsule::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_message_5fconteiner_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_message_5fconteiner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_types_2eproto();
  ::protbuf::protobuf_AddDesc_group_2eproto();
  ::protbuf::protobuf_AddDesc_user_2eproto();
  ::protbuf::protobuf_AddDesc_package_2eproto();
  ::protbuf::protobuf_AddDesc_parameters_2eproto();
  ::protbuf::protobuf_AddDesc_item_2eproto();
  MessageFrame::default_instance_ = new MessageFrame();
  ResponseCode::default_instance_ = new ResponseCode();
  FilterComponent::default_instance_ = new FilterComponent();
  Filter::default_instance_ = new Filter();
  Limits::default_instance_ = new Limits();
  OrderBy::default_instance_ = new OrderBy();
  MessageCapsule::default_instance_ = new MessageCapsule();
  MessageFrame::default_instance_->InitAsDefaultInstance();
  ResponseCode::default_instance_->InitAsDefaultInstance();
  FilterComponent::default_instance_->InitAsDefaultInstance();
  Filter::default_instance_->InitAsDefaultInstance();
  Limits::default_instance_->InitAsDefaultInstance();
  OrderBy::default_instance_->InitAsDefaultInstance();
  MessageCapsule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fconteiner_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_5fconteiner_2eproto_once_);
void protobuf_AddDesc_message_5fconteiner_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_5fconteiner_2eproto_once_,
                 &protobuf_AddDesc_message_5fconteiner_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fconteiner_2eproto {
  StaticDescriptorInitializer_message_5fconteiner_2eproto() {
    protobuf_AddDesc_message_5fconteiner_2eproto();
  }
} static_descriptor_initializer_message_5fconteiner_2eproto_;
#endif
bool Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MessageFrame::kCapsulesFieldNumber;
#endif  // !_MSC_VER

MessageFrame::MessageFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageFrame::InitAsDefaultInstance() {
}

MessageFrame::MessageFrame(const MessageFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageFrame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageFrame::~MessageFrame() {
  SharedDtor();
}

void MessageFrame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageFrame& MessageFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

MessageFrame* MessageFrame::default_instance_ = NULL;

MessageFrame* MessageFrame::New() const {
  return new MessageFrame;
}

void MessageFrame::Clear() {
  capsules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protbuf.MessageCapsule capsules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capsules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capsules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_capsules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protbuf.MessageCapsule capsules = 1;
  for (int i = 0; i < this->capsules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->capsules(i), output);
  }

}

int MessageFrame::ByteSize() const {
  int total_size = 0;

  // repeated .protbuf.MessageCapsule capsules = 1;
  total_size += 1 * this->capsules_size();
  for (int i = 0; i < this->capsules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capsules(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageFrame*>(&from));
}

void MessageFrame::MergeFrom(const MessageFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  capsules_.MergeFrom(from.capsules_);
}

void MessageFrame::CopyFrom(const MessageFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFrame::IsInitialized() const {

  for (int i = 0; i < capsules_size(); i++) {
    if (!this->capsules(i).IsInitialized()) return false;
  }
  return true;
}

void MessageFrame::Swap(MessageFrame* other) {
  if (other != this) {
    capsules_.Swap(&other->capsules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageFrame::GetTypeName() const {
  return "protbuf.MessageFrame";
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCode::kErrorFieldNumber;
const int ResponseCode::kCodeFieldNumber;
#endif  // !_MSC_VER

ResponseCode::ResponseCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResponseCode::InitAsDefaultInstance() {
}

ResponseCode::ResponseCode(const ResponseCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCode::SharedCtor() {
  _cached_size_ = 0;
  error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCode::~ResponseCode() {
  SharedDtor();
}

void ResponseCode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseCode& ResponseCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

ResponseCode* ResponseCode::default_instance_ = NULL;

ResponseCode* ResponseCode::New() const {
  return new ResponseCode;
}

void ResponseCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = false;
  }
  code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResponseCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // repeated uint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_code())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_code())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->error(), output);
  }

  // repeated uint32 code = 2;
  for (int i = 0; i < this->code_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->code(i), output);
  }

}

int ResponseCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool error = 1;
    if (has_error()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 code = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->code_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->code(i));
    }
    total_size += 1 * this->code_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCode*>(&from));
}

void ResponseCode::MergeFrom(const ResponseCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  code_.MergeFrom(from.code_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
}

void ResponseCode::CopyFrom(const ResponseCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseCode::Swap(ResponseCode* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    code_.Swap(&other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseCode::GetTypeName() const {
  return "protbuf.ResponseCode";
}


// ===================================================================

bool FilterComponent_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FilterComponent_Operation FilterComponent::Equal;
const FilterComponent_Operation FilterComponent::NotEqual;
const FilterComponent_Operation FilterComponent::LessThen;
const FilterComponent_Operation FilterComponent::Operation_MIN;
const FilterComponent_Operation FilterComponent::Operation_MAX;
const int FilterComponent::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FilterComponent::kLvalueFieldNumber;
const int FilterComponent::kOperationFieldNumber;
const int FilterComponent::kRvalueFieldNumber;
#endif  // !_MSC_VER

FilterComponent::FilterComponent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FilterComponent::InitAsDefaultInstance() {
}

FilterComponent::FilterComponent(const FilterComponent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FilterComponent::SharedCtor() {
  _cached_size_ = 0;
  lvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operation_ = 1;
  rvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterComponent::~FilterComponent() {
  SharedDtor();
}

void FilterComponent::SharedDtor() {
  if (lvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete lvalue_;
  }
  if (rvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete rvalue_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FilterComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilterComponent& FilterComponent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

FilterComponent* FilterComponent::default_instance_ = NULL;

FilterComponent* FilterComponent::New() const {
  return new FilterComponent;
}

void FilterComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lvalue()) {
      if (lvalue_ != &::google::protobuf::internal::kEmptyString) {
        lvalue_->clear();
      }
    }
    operation_ = 1;
    if (has_rvalue()) {
      if (rvalue_ != &::google::protobuf::internal::kEmptyString) {
        rvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FilterComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes lvalue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required .protbuf.FilterComponent.Operation operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protbuf::FilterComponent_Operation_IsValid(value)) {
            set_operation(static_cast< ::protbuf::FilterComponent_Operation >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rvalue;
        break;
      }

      // required bytes rvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes lvalue = 1;
  if (has_lvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->lvalue(), output);
  }

  // required .protbuf.FilterComponent.Operation operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // required bytes rvalue = 3;
  if (has_rvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rvalue(), output);
  }

}

int FilterComponent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes lvalue = 1;
    if (has_lvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lvalue());
    }

    // required .protbuf.FilterComponent.Operation operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // required bytes rvalue = 3;
    if (has_rvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rvalue());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterComponent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilterComponent*>(&from));
}

void FilterComponent::MergeFrom(const FilterComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvalue()) {
      set_lvalue(from.lvalue());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_rvalue()) {
      set_rvalue(from.rvalue());
    }
  }
}

void FilterComponent::CopyFrom(const FilterComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterComponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FilterComponent::Swap(FilterComponent* other) {
  if (other != this) {
    std::swap(lvalue_, other->lvalue_);
    std::swap(operation_, other->operation_);
    std::swap(rvalue_, other->rvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FilterComponent::GetTypeName() const {
  return "protbuf.FilterComponent";
}


// ===================================================================

#ifndef _MSC_VER
const int Filter::kComponentFieldNumber;
#endif  // !_MSC_VER

Filter::Filter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Filter::InitAsDefaultInstance() {
}

Filter::Filter(const Filter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Filter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filter::~Filter() {
  SharedDtor();
}

void Filter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Filter& Filter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

Filter* Filter::default_instance_ = NULL;

Filter* Filter::New() const {
  return new Filter;
}

void Filter::Clear() {
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protbuf.FilterComponent component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_component;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protbuf.FilterComponent component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->component(i), output);
  }

}

int Filter::ByteSize() const {
  int total_size = 0;

  // repeated .protbuf.FilterComponent component = 1;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Filter*>(&from));
}

void Filter::MergeFrom(const Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
}

void Filter::CopyFrom(const Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {

  for (int i = 0; i < component_size(); i++) {
    if (!this->component(i).IsInitialized()) return false;
  }
  return true;
}

void Filter::Swap(Filter* other) {
  if (other != this) {
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Filter::GetTypeName() const {
  return "protbuf.Filter";
}


// ===================================================================

#ifndef _MSC_VER
const int Limits::kCountFieldNumber;
const int Limits::kOffsetFieldNumber;
#endif  // !_MSC_VER

Limits::Limits()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Limits::InitAsDefaultInstance() {
}

Limits::Limits(const Limits& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Limits::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Limits::~Limits() {
  SharedDtor();
}

void Limits::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Limits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Limits& Limits::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

Limits* Limits::default_instance_ = NULL;

Limits* Limits::New() const {
  return new Limits;
}

void Limits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    offset_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Limits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Limits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

}

int Limits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Limits::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Limits*>(&from));
}

void Limits::MergeFrom(const Limits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
}

void Limits::CopyFrom(const Limits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limits::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Limits::Swap(Limits* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Limits::GetTypeName() const {
  return "protbuf.Limits";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OrderBy::OrderBy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OrderBy::InitAsDefaultInstance() {
}

OrderBy::OrderBy(const OrderBy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBy::~OrderBy() {
  SharedDtor();
}

void OrderBy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OrderBy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OrderBy& OrderBy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

OrderBy* OrderBy::default_instance_ = NULL;

OrderBy* OrderBy::New() const {
  return new OrderBy;
}

void OrderBy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int OrderBy::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OrderBy*>(&from));
}

void OrderBy::MergeFrom(const OrderBy& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void OrderBy::CopyFrom(const OrderBy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {

  return true;
}

void OrderBy::Swap(OrderBy* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OrderBy::GetTypeName() const {
  return "protbuf.OrderBy";
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCapsule::kMsgIdFieldNumber;
const int MessageCapsule::kMsgTypeFieldNumber;
const int MessageCapsule::kDataFieldNumber;
const int MessageCapsule::kActionFieldNumber;
const int MessageCapsule::kFilterFieldNumber;
const int MessageCapsule::kLimitsFieldNumber;
const int MessageCapsule::kOrderFieldNumber;
const int MessageCapsule::kCompressedFieldNumber;
#endif  // !_MSC_VER

MessageCapsule::MessageCapsule()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageCapsule::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filter_ = const_cast< ::protbuf::Filter*>(
      ::protbuf::Filter::internal_default_instance());
#else
  filter_ = const_cast< ::protbuf::Filter*>(&::protbuf::Filter::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  limits_ = const_cast< ::protbuf::Limits*>(
      ::protbuf::Limits::internal_default_instance());
#else
  limits_ = const_cast< ::protbuf::Limits*>(&::protbuf::Limits::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  order_ = const_cast< ::protbuf::OrderBy*>(
      ::protbuf::OrderBy::internal_default_instance());
#else
  order_ = const_cast< ::protbuf::OrderBy*>(&::protbuf::OrderBy::default_instance());
#endif
}

MessageCapsule::MessageCapsule(const MessageCapsule& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCapsule::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 1u;
  msgtype_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 1;
  filter_ = NULL;
  limits_ = NULL;
  order_ = NULL;
  compressed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCapsule::~MessageCapsule() {
  SharedDtor();
}

void MessageCapsule::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filter_;
    delete limits_;
    delete order_;
  }
}

void MessageCapsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageCapsule& MessageCapsule::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

MessageCapsule* MessageCapsule::default_instance_ = NULL;

MessageCapsule* MessageCapsule::New() const {
  return new MessageCapsule;
}

void MessageCapsule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 1u;
    msgtype_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    action_ = 1;
    if (has_filter()) {
      if (filter_ != NULL) filter_->::protbuf::Filter::Clear();
    }
    if (has_limits()) {
      if (limits_ != NULL) limits_->::protbuf::Limits::Clear();
    }
    if (has_order()) {
      if (order_ != NULL) order_->::protbuf::OrderBy::Clear();
    }
    compressed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageCapsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgId = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // required .MsgType msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .protbuf.Action action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protbuf::Action_IsValid(value)) {
            set_action(static_cast< ::protbuf::Action >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filter;
        break;
      }

      // optional .protbuf.Filter filter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_limits;
        break;
      }

      // optional .protbuf.Limits limits = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_order;
        break;
      }

      // optional .protbuf.OrderBy order = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_compressed;
        break;
      }

      // optional bool compressed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
          set_has_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCapsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgId = 1 [default = 1];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required .MsgType msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional .protbuf.Action action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional .protbuf.Filter filter = 5;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->filter(), output);
  }

  // optional .protbuf.Limits limits = 6;
  if (has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->limits(), output);
  }

  // optional .protbuf.OrderBy order = 7;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->order(), output);
  }

  // optional bool compressed = 8;
  if (has_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->compressed(), output);
  }

}

int MessageCapsule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgId = 1 [default = 1];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required .MsgType msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .protbuf.Action action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .protbuf.Filter filter = 5;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional .protbuf.Limits limits = 6;
    if (has_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limits());
    }

    // optional .protbuf.OrderBy order = 7;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

    // optional bool compressed = 8;
    if (has_compressed()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCapsule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageCapsule*>(&from));
}

void MessageCapsule::MergeFrom(const MessageCapsule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_filter()) {
      mutable_filter()->::protbuf::Filter::MergeFrom(from.filter());
    }
    if (from.has_limits()) {
      mutable_limits()->::protbuf::Limits::MergeFrom(from.limits());
    }
    if (from.has_order()) {
      mutable_order()->::protbuf::OrderBy::MergeFrom(from.order());
    }
    if (from.has_compressed()) {
      set_compressed(from.compressed());
    }
  }
}

void MessageCapsule::CopyFrom(const MessageCapsule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCapsule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  if (has_limits()) {
    if (!this->limits().IsInitialized()) return false;
  }
  return true;
}

void MessageCapsule::Swap(MessageCapsule* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(data_, other->data_);
    std::swap(action_, other->action_);
    std::swap(filter_, other->filter_);
    std::swap(limits_, other->limits_);
    std::swap(order_, other->order_);
    std::swap(compressed_, other->compressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageCapsule::GetTypeName() const {
  return "protbuf.MessageCapsule";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)
