// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_common_2eproto() {
  delete ResponseCode::default_instance_;
  delete Filter::default_instance_;
  delete Filter_FilterComponent::default_instance_;
  delete Limits::default_instance_;
  delete OrderBy::default_instance_;
  delete DateTime::default_instance_;
  delete DateTime_Unix::default_instance_;
  delete DateTime_Text::default_instance_;
  delete DateTime_Date::default_instance_;
  delete Event::default_instance_;
  delete TimeLine::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ResponseCode::default_instance_ = new ResponseCode();
  Filter::default_instance_ = new Filter();
  Filter_FilterComponent::default_instance_ = new Filter_FilterComponent();
  Limits::default_instance_ = new Limits();
  OrderBy::default_instance_ = new OrderBy();
  DateTime::default_instance_ = new DateTime();
  DateTime_Unix::default_instance_ = new DateTime_Unix();
  DateTime_Text::default_instance_ = new DateTime_Text();
  DateTime_Date::default_instance_ = new DateTime_Date();
  Event::default_instance_ = new Event();
  TimeLine::default_instance_ = new TimeLine();
  ResponseCode::default_instance_->InitAsDefaultInstance();
  Filter::default_instance_->InitAsDefaultInstance();
  Filter_FilterComponent::default_instance_->InitAsDefaultInstance();
  Limits::default_instance_->InitAsDefaultInstance();
  OrderBy::default_instance_->InitAsDefaultInstance();
  DateTime::default_instance_->InitAsDefaultInstance();
  DateTime_Unix::default_instance_->InitAsDefaultInstance();
  DateTime_Text::default_instance_->InitAsDefaultInstance();
  DateTime_Date::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  TimeLine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_common_2eproto_once_);
void protobuf_AddDesc_common_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_common_2eproto_once_,
                 &protobuf_AddDesc_common_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ResponseCode::kErrorFieldNumber;
const int ResponseCode::kCodeFieldNumber;
#endif  // !_MSC_VER

ResponseCode::ResponseCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResponseCode)
}

void ResponseCode::InitAsDefaultInstance() {
}

ResponseCode::ResponseCode(const ResponseCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResponseCode)
}

void ResponseCode::SharedCtor() {
  _cached_size_ = 0;
  error_ = false;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCode::~ResponseCode() {
  // @@protoc_insertion_point(destructor:ResponseCode)
  SharedDtor();
}

void ResponseCode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResponseCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResponseCode& ResponseCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

ResponseCode* ResponseCode::default_instance_ = NULL;

ResponseCode* ResponseCode::New() const {
  return new ResponseCode;
}

void ResponseCode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseCode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(error_, code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ResponseCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:ResponseCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResponseCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResponseCode)
  return false;
#undef DO_
}

void ResponseCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResponseCode)
  // optional bool error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->error(), output);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:ResponseCode)
}

int ResponseCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool error = 1;
    if (has_error()) {
      total_size += 1 + 1;
    }

    // optional uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCode*>(&from));
}

void ResponseCode::MergeFrom(const ResponseCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ResponseCode::CopyFrom(const ResponseCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCode::IsInitialized() const {

  return true;
}

void ResponseCode::Swap(ResponseCode* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResponseCode::GetTypeName() const {
  return "ResponseCode";
}


// ===================================================================

bool Filter_FilterComponent_Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Filter_FilterComponent_Operation Filter_FilterComponent::Equal;
const Filter_FilterComponent_Operation Filter_FilterComponent::NotEqual;
const Filter_FilterComponent_Operation Filter_FilterComponent::LessThen;
const Filter_FilterComponent_Operation Filter_FilterComponent::Operation_MIN;
const Filter_FilterComponent_Operation Filter_FilterComponent::Operation_MAX;
const int Filter_FilterComponent::Operation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Filter_FilterComponent::kLvalueFieldNumber;
const int Filter_FilterComponent::kOperationFieldNumber;
const int Filter_FilterComponent::kRvalueFieldNumber;
#endif  // !_MSC_VER

Filter_FilterComponent::Filter_FilterComponent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Filter.FilterComponent)
}

void Filter_FilterComponent::InitAsDefaultInstance() {
}

Filter_FilterComponent::Filter_FilterComponent(const Filter_FilterComponent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Filter.FilterComponent)
}

void Filter_FilterComponent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 1;
  rvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filter_FilterComponent::~Filter_FilterComponent() {
  // @@protoc_insertion_point(destructor:Filter.FilterComponent)
  SharedDtor();
}

void Filter_FilterComponent::SharedDtor() {
  if (lvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lvalue_;
  }
  if (rvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rvalue_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Filter_FilterComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Filter_FilterComponent& Filter_FilterComponent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Filter_FilterComponent* Filter_FilterComponent::default_instance_ = NULL;

Filter_FilterComponent* Filter_FilterComponent::New() const {
  return new Filter_FilterComponent;
}

void Filter_FilterComponent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_lvalue()) {
      if (lvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lvalue_->clear();
      }
    }
    operation_ = 1;
    if (has_rvalue()) {
      if (rvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Filter_FilterComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Filter.FilterComponent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes lvalue = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required .Filter.FilterComponent.Operation operation = 2;
      case 2: {
        if (tag == 16) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Filter_FilterComponent_Operation_IsValid(value)) {
            set_operation(static_cast< ::Filter_FilterComponent_Operation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rvalue;
        break;
      }

      // required bytes rvalue = 3;
      case 3: {
        if (tag == 26) {
         parse_rvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Filter.FilterComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Filter.FilterComponent)
  return false;
#undef DO_
}

void Filter_FilterComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Filter.FilterComponent)
  // required bytes lvalue = 1;
  if (has_lvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->lvalue(), output);
  }

  // required .Filter.FilterComponent.Operation operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // required bytes rvalue = 3;
  if (has_rvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rvalue(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Filter.FilterComponent)
}

int Filter_FilterComponent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes lvalue = 1;
    if (has_lvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lvalue());
    }

    // required .Filter.FilterComponent.Operation operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // required bytes rvalue = 3;
    if (has_rvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rvalue());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filter_FilterComponent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Filter_FilterComponent*>(&from));
}

void Filter_FilterComponent::MergeFrom(const Filter_FilterComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvalue()) {
      set_lvalue(from.lvalue());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_rvalue()) {
      set_rvalue(from.rvalue());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Filter_FilterComponent::CopyFrom(const Filter_FilterComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter_FilterComponent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Filter_FilterComponent::Swap(Filter_FilterComponent* other) {
  if (other != this) {
    std::swap(lvalue_, other->lvalue_);
    std::swap(operation_, other->operation_);
    std::swap(rvalue_, other->rvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Filter_FilterComponent::GetTypeName() const {
  return "Filter.FilterComponent";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Filter::kComponentFieldNumber;
#endif  // !_MSC_VER

Filter::Filter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Filter)
}

void Filter::InitAsDefaultInstance() {
}

Filter::Filter(const Filter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Filter)
}

void Filter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Filter& Filter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Filter* Filter::default_instance_ = NULL;

Filter* Filter::New() const {
  return new Filter;
}

void Filter::Clear() {
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Filter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Filter.FilterComponent component = 1;
      case 1: {
        if (tag == 10) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_component;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Filter)
  return false;
#undef DO_
}

void Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Filter)
  // repeated .Filter.FilterComponent component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->component(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Filter)
}

int Filter::ByteSize() const {
  int total_size = 0;

  // repeated .Filter.FilterComponent component = 1;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Filter*>(&from));
}

void Filter::MergeFrom(const Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Filter::CopyFrom(const Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->component())) return false;
  return true;
}

void Filter::Swap(Filter* other) {
  if (other != this) {
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Filter::GetTypeName() const {
  return "Filter";
}


// ===================================================================

#ifndef _MSC_VER
const int Limits::kCountFieldNumber;
const int Limits::kOffsetFieldNumber;
#endif  // !_MSC_VER

Limits::Limits()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Limits)
}

void Limits::InitAsDefaultInstance() {
}

Limits::Limits(const Limits& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Limits)
}

void Limits::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Limits::~Limits() {
  // @@protoc_insertion_point(destructor:Limits)
  SharedDtor();
}

void Limits::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Limits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Limits& Limits::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Limits* Limits::default_instance_ = NULL;

Limits* Limits::New() const {
  return new Limits;
}

void Limits::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Limits*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Limits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Limits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Limits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Limits)
  return false;
#undef DO_
}

void Limits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Limits)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Limits)
}

int Limits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Limits::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Limits*>(&from));
}

void Limits::MergeFrom(const Limits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Limits::CopyFrom(const Limits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limits::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Limits::Swap(Limits* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Limits::GetTypeName() const {
  return "Limits";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OrderBy::OrderBy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrderBy)
}

void OrderBy::InitAsDefaultInstance() {
}

OrderBy::OrderBy(const OrderBy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrderBy)
}

void OrderBy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBy::~OrderBy() {
  // @@protoc_insertion_point(destructor:OrderBy)
  SharedDtor();
}

void OrderBy::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OrderBy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OrderBy& OrderBy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

OrderBy* OrderBy::default_instance_ = NULL;

OrderBy* OrderBy::New() const {
  return new OrderBy;
}

void OrderBy::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:OrderBy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:OrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrderBy)
  return false;
#undef DO_
}

void OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrderBy)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:OrderBy)
}

int OrderBy::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OrderBy*>(&from));
}

void OrderBy::MergeFrom(const OrderBy& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void OrderBy::CopyFrom(const OrderBy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {

  return true;
}

void OrderBy::Swap(OrderBy* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OrderBy::GetTypeName() const {
  return "OrderBy";
}


// ===================================================================

#ifndef _MSC_VER
const int DateTime_Unix::kDFieldNumber;
#endif  // !_MSC_VER

DateTime_Unix::DateTime_Unix()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DateTime.Unix)
}

void DateTime_Unix::InitAsDefaultInstance() {
}

DateTime_Unix::DateTime_Unix(const DateTime_Unix& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DateTime.Unix)
}

void DateTime_Unix::SharedCtor() {
  _cached_size_ = 0;
  d_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime_Unix::~DateTime_Unix() {
  // @@protoc_insertion_point(destructor:DateTime.Unix)
  SharedDtor();
}

void DateTime_Unix::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime_Unix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime_Unix& DateTime_Unix::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

DateTime_Unix* DateTime_Unix::default_instance_ = NULL;

DateTime_Unix* DateTime_Unix::New() const {
  return new DateTime_Unix;
}

void DateTime_Unix::Clear() {
  d_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime_Unix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DateTime.Unix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 d = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DateTime.Unix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DateTime.Unix)
  return false;
#undef DO_
}

void DateTime_Unix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DateTime.Unix)
  // required fixed64 d = 1;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->d(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DateTime.Unix)
}

int DateTime_Unix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 d = 1;
    if (has_d()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime_Unix::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime_Unix*>(&from));
}

void DateTime_Unix::MergeFrom(const DateTime_Unix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_d()) {
      set_d(from.d());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime_Unix::CopyFrom(const DateTime_Unix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime_Unix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DateTime_Unix::Swap(DateTime_Unix* other) {
  if (other != this) {
    std::swap(d_, other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime_Unix::GetTypeName() const {
  return "DateTime.Unix";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DateTime_Text::kDateStringFieldNumber;
#endif  // !_MSC_VER

DateTime_Text::DateTime_Text()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DateTime.Text)
}

void DateTime_Text::InitAsDefaultInstance() {
}

DateTime_Text::DateTime_Text(const DateTime_Text& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DateTime.Text)
}

void DateTime_Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  date_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime_Text::~DateTime_Text() {
  // @@protoc_insertion_point(destructor:DateTime.Text)
  SharedDtor();
}

void DateTime_Text::SharedDtor() {
  if (date_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_string_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime_Text& DateTime_Text::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

DateTime_Text* DateTime_Text::default_instance_ = NULL;

DateTime_Text* DateTime_Text::New() const {
  return new DateTime_Text;
}

void DateTime_Text::Clear() {
  if (has_date_string()) {
    if (date_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      date_string_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DateTime.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string date_string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DateTime.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DateTime.Text)
  return false;
#undef DO_
}

void DateTime_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DateTime.Text)
  // required string date_string = 1;
  if (has_date_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->date_string(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DateTime.Text)
}

int DateTime_Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string date_string = 1;
    if (has_date_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_string());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime_Text::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime_Text*>(&from));
}

void DateTime_Text::MergeFrom(const DateTime_Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_string()) {
      set_date_string(from.date_string());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime_Text::CopyFrom(const DateTime_Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DateTime_Text::Swap(DateTime_Text* other) {
  if (other != this) {
    std::swap(date_string_, other->date_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime_Text::GetTypeName() const {
  return "DateTime.Text";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DateTime_Date::kYearFieldNumber;
const int DateTime_Date::kMonthFieldNumber;
const int DateTime_Date::kDayFieldNumber;
const int DateTime_Date::kHourFieldNumber;
const int DateTime_Date::kMinuteFieldNumber;
const int DateTime_Date::kSecFieldNumber;
#endif  // !_MSC_VER

DateTime_Date::DateTime_Date()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DateTime.Date)
}

void DateTime_Date::InitAsDefaultInstance() {
}

DateTime_Date::DateTime_Date(const DateTime_Date& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DateTime.Date)
}

void DateTime_Date::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0u;
  month_ = 0u;
  day_ = 0u;
  hour_ = 0u;
  minute_ = 0u;
  sec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTime_Date::~DateTime_Date() {
  // @@protoc_insertion_point(destructor:DateTime.Date)
  SharedDtor();
}

void DateTime_Date::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime_Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime_Date& DateTime_Date::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

DateTime_Date* DateTime_Date::default_instance_ = NULL;

DateTime_Date* DateTime_Date::New() const {
  return new DateTime_Date;
}

void DateTime_Date::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DateTime_Date*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(year_, sec_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime_Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DateTime.Date)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional uint32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional uint32 day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 4;
      case 4: {
        if (tag == 32) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minute;
        break;
      }

      // optional uint32 minute = 5;
      case 5: {
        if (tag == 40) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sec;
        break;
      }

      // optional uint32 sec = 6;
      case 6: {
        if (tag == 48) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DateTime.Date)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DateTime.Date)
  return false;
#undef DO_
}

void DateTime_Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DateTime.Date)
  // optional uint32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // optional uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // optional uint32 hour = 4;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hour(), output);
  }

  // optional uint32 minute = 5;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minute(), output);
  }

  // optional uint32 sec = 6;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sec(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DateTime.Date)
}

int DateTime_Date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 4;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 5;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional uint32 sec = 6;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime_Date::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime_Date*>(&from));
}

void DateTime_Date::MergeFrom(const DateTime_Date& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime_Date::CopyFrom(const DateTime_Date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime_Date::IsInitialized() const {

  return true;
}

void DateTime_Date::Swap(DateTime_Date* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(sec_, other->sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime_Date::GetTypeName() const {
  return "DateTime.Date";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DateTime::kUnixFieldNumber;
const int DateTime::kTextFieldNumber;
const int DateTime::kDateFieldNumber;
#endif  // !_MSC_VER

DateTime::DateTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DateTime)
}

void DateTime::InitAsDefaultInstance() {
}

DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DateTime)
}

void DateTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_d();
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  if (has_d()) {
    clear_d();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DateTime& DateTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

DateTime* DateTime::default_instance_ = NULL;

DateTime* DateTime::New() const {
  return new DateTime;
}

void DateTime::clear_d() {
  switch(d_case()) {
    case kUnix: {
      delete d_.unix_;
      break;
    }
    case kText: {
      delete d_.text_;
      break;
    }
    case kDate: {
      delete d_.date_;
      break;
    }
    case D_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = D_NOT_SET;
}


void DateTime::Clear() {
  clear_d();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:DateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DateTime.Unix unix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional .DateTime.Text text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional .DateTime.Date date = 3;
      case 3: {
        if (tag == 26) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DateTime)
  return false;
#undef DO_
}

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DateTime)
  // optional .DateTime.Unix unix = 1;
  if (has_unix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->unix(), output);
  }

  // optional .DateTime.Text text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->text(), output);
  }

  // optional .DateTime.Date date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->date(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:DateTime)
}

int DateTime::ByteSize() const {
  int total_size = 0;

  switch (d_case()) {
    // optional .DateTime.Unix unix = 1;
    case kUnix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unix());
      break;
    }
    // optional .DateTime.Text text = 2;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
      break;
    }
    // optional .DateTime.Date date = 3;
    case kDate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
      break;
    }
    case D_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DateTime*>(&from));
}

void DateTime::MergeFrom(const DateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.d_case()) {
    case kUnix: {
      mutable_unix()->::DateTime_Unix::MergeFrom(from.unix());
      break;
    }
    case kText: {
      mutable_text()->::DateTime_Text::MergeFrom(from.text());
      break;
    }
    case kDate: {
      mutable_date()->::DateTime_Date::MergeFrom(from.date());
      break;
    }
    case D_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DateTime::CopyFrom(const DateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {

  if (has_unix()) {
    if (!this->unix().IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other != this) {
    std::swap(d_, other->d_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DateTime::GetTypeName() const {
  return "DateTime";
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kTimestampFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Event)
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:Event)
  SharedDtor();
}

void Event::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Event& Event::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Event)
  // required fixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:Event)
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Event::GetTypeName() const {
  return "Event";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLine::kEventFieldNumber;
#endif  // !_MSC_VER

TimeLine::TimeLine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeLine)
}

void TimeLine::InitAsDefaultInstance() {
}

TimeLine::TimeLine(const TimeLine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TimeLine)
}

void TimeLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLine::~TimeLine() {
  // @@protoc_insertion_point(destructor:TimeLine)
  SharedDtor();
}

void TimeLine::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLine& TimeLine::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

TimeLine* TimeLine::default_instance_ = NULL;

TimeLine* TimeLine::New() const {
  return new TimeLine;
}

void TimeLine::Clear() {
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TimeLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:TimeLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Event event = 1;
      case 1: {
        if (tag == 10) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeLine)
  return false;
#undef DO_
}

void TimeLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeLine)
  // repeated .Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->event(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:TimeLine)
}

int TimeLine::ByteSize() const {
  int total_size = 0;

  // repeated .Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLine*>(&from));
}

void TimeLine::MergeFrom(const TimeLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TimeLine::CopyFrom(const TimeLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLine::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->event())) return false;
  return true;
}

void TimeLine::Swap(TimeLine* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLine::GetTypeName() const {
  return "TimeLine";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
