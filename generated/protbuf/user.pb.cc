// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

void protobuf_ShutdownFile_user_2eproto() {
  delete LoginRequest::default_instance_;
  delete UserDetails::default_instance_;
  delete UserStatistics::default_instance_;
  delete UserConfig::default_instance_;
  delete UserFullData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_user_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protbuf::protobuf_AddDesc_storage_2eproto();
  ::protbuf::protobuf_AddDesc_stats_2eproto();
  ::protobuf_AddDesc_common_2eproto();
  LoginRequest::default_instance_ = new LoginRequest();
  UserDetails::default_instance_ = new UserDetails();
  UserStatistics::default_instance_ = new UserStatistics();
  UserConfig::default_instance_ = new UserConfig();
  UserFullData::default_instance_ = new UserFullData();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  UserDetails::default_instance_->InitAsDefaultInstance();
  UserStatistics::default_instance_->InitAsDefaultInstance();
  UserConfig::default_instance_->InitAsDefaultInstance();
  UserFullData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_user_2eproto_once_);
void protobuf_AddDesc_user_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_user_2eproto_once_,
                 &protobuf_AddDesc_user_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;
#endif
bool Replay_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kNameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRequest& LoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginRequest::GetTypeName() const {
  return "protbuf.LoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int UserDetails::kEmailFieldNumber;
const int UserDetails::kNameFieldNumber;
const int UserDetails::kAddressFieldNumber;
const int UserDetails::kPhoneNumberFieldNumber;
const int UserDetails::kDescriptionFieldNumber;
const int UserDetails::kAvatarFieldNumber;
#endif  // !_MSC_VER

UserDetails::UserDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserDetails::InitAsDefaultInstance() {
}

UserDetails::UserDetails(const UserDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserDetails::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDetails::~UserDetails() {
  SharedDtor();
}

void UserDetails::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserDetails& UserDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserDetails* UserDetails::default_instance_ = NULL;

UserDetails* UserDetails::New() const {
  return new UserDetails;
}

void UserDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
        phone_number_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        break;
      }

      // optional bytes phone_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional bytes description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // optional bytes phone_number = 4;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->phone_number(), output);
  }

  // optional bytes description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->description(), output);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->avatar(), output);
  }

}

int UserDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional bytes phone_number = 4;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_number());
    }

    // optional bytes description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // optional bytes avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserDetails*>(&from));
}

void UserDetails::MergeFrom(const UserDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
}

void UserDetails::CopyFrom(const UserDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetails::IsInitialized() const {

  return true;
}

void UserDetails::Swap(UserDetails* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(description_, other->description_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserDetails::GetTypeName() const {
  return "protbuf.UserDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatistics::kLastLoginFieldNumber;
const int UserStatistics::kRegistrationDateFieldNumber;
#endif  // !_MSC_VER

UserStatistics::UserStatistics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserStatistics::InitAsDefaultInstance() {
}

UserStatistics::UserStatistics(const UserStatistics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserStatistics::SharedCtor() {
  _cached_size_ = 0;
  last_login_ = GOOGLE_ULONGLONG(0);
  registration_date_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatistics::~UserStatistics() {
  SharedDtor();
}

void UserStatistics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserStatistics& UserStatistics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserStatistics* UserStatistics::default_instance_ = NULL;

UserStatistics* UserStatistics::New() const {
  return new UserStatistics;
}

void UserStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_login_ = GOOGLE_ULONGLONG(0);
    registration_date_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 last_login = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_login_)));
          set_has_last_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_registration_date;
        break;
      }

      // optional fixed64 registration_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_registration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &registration_date_)));
          set_has_registration_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 last_login = 7;
  if (has_last_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->last_login(), output);
  }

  // optional fixed64 registration_date = 8;
  if (has_registration_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->registration_date(), output);
  }

}

int UserStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 last_login = 7;
    if (has_last_login()) {
      total_size += 1 + 8;
    }

    // optional fixed64 registration_date = 8;
    if (has_registration_date()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserStatistics*>(&from));
}

void UserStatistics::MergeFrom(const UserStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_login()) {
      set_last_login(from.last_login());
    }
    if (from.has_registration_date()) {
      set_registration_date(from.registration_date());
    }
  }
}

void UserStatistics::CopyFrom(const UserStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatistics::IsInitialized() const {

  return true;
}

void UserStatistics::Swap(UserStatistics* other) {
  if (other != this) {
    std::swap(last_login_, other->last_login_);
    std::swap(registration_date_, other->registration_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserStatistics::GetTypeName() const {
  return "protbuf.UserStatistics";
}


// ===================================================================

#ifndef _MSC_VER
const int UserConfig::kLastStorageIdFieldNumber;
const int UserConfig::kLastGroupFieldNumber;
#endif  // !_MSC_VER

UserConfig::UserConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserConfig::InitAsDefaultInstance() {
}

UserConfig::UserConfig(const UserConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserConfig::SharedCtor() {
  _cached_size_ = 0;
  last_storage_id_ = 0u;
  last_group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserConfig::~UserConfig() {
  SharedDtor();
}

void UserConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConfig& UserConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserConfig* UserConfig::default_instance_ = NULL;

UserConfig* UserConfig::New() const {
  return new UserConfig;
}

void UserConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_storage_id_ = 0u;
    last_group_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_storage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_storage_id_)));
          set_has_last_storage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_group;
        break;
      }

      // optional uint32 last_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_group_)));
          set_has_last_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_storage_id = 1;
  if (has_last_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_storage_id(), output);
  }

  // optional uint32 last_group = 2;
  if (has_last_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_group(), output);
  }

}

int UserConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_storage_id = 1;
    if (has_last_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_storage_id());
    }

    // optional uint32 last_group = 2;
    if (has_last_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_group());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConfig*>(&from));
}

void UserConfig::MergeFrom(const UserConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_storage_id()) {
      set_last_storage_id(from.last_storage_id());
    }
    if (from.has_last_group()) {
      set_last_group(from.last_group());
    }
  }
}

void UserConfig::CopyFrom(const UserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConfig::IsInitialized() const {

  return true;
}

void UserConfig::Swap(UserConfig* other) {
  if (other != this) {
    std::swap(last_storage_id_, other->last_storage_id_);
    std::swap(last_group_, other->last_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserConfig::GetTypeName() const {
  return "protbuf.UserConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int UserFullData::kBasicFieldNumber;
const int UserFullData::kDetailsFieldNumber;
const int UserFullData::kConfigFieldNumber;
const int UserFullData::kStatsFieldNumber;
const int UserFullData::kStoragesFieldNumber;
const int UserFullData::kPasswordFieldNumber;
#endif  // !_MSC_VER

UserFullData::UserFullData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserFullData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::IdField*>(
      ::IdField::internal_default_instance());
#else
  basic_ = const_cast< ::IdField*>(&::IdField::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  details_ = const_cast< ::protbuf::UserDetails*>(
      ::protbuf::UserDetails::internal_default_instance());
#else
  details_ = const_cast< ::protbuf::UserDetails*>(&::protbuf::UserDetails::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::protbuf::UserConfig*>(
      ::protbuf::UserConfig::internal_default_instance());
#else
  config_ = const_cast< ::protbuf::UserConfig*>(&::protbuf::UserConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_ = const_cast< ::protbuf::UserStatistics*>(
      ::protbuf::UserStatistics::internal_default_instance());
#else
  stats_ = const_cast< ::protbuf::UserStatistics*>(&::protbuf::UserStatistics::default_instance());
#endif
}

UserFullData::UserFullData(const UserFullData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserFullData::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  details_ = NULL;
  config_ = NULL;
  stats_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserFullData::~UserFullData() {
  SharedDtor();
}

void UserFullData::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
    delete details_;
    delete config_;
    delete stats_;
  }
}

void UserFullData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserFullData& UserFullData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserFullData* UserFullData::default_instance_ = NULL;

UserFullData* UserFullData::New() const {
  return new UserFullData;
}

void UserFullData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::IdField::Clear();
    }
    if (has_details()) {
      if (details_ != NULL) details_->::protbuf::UserDetails::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::protbuf::UserConfig::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::protbuf::UserStatistics::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  storages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserFullData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IdField basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // required .protbuf.UserDetails details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional .protbuf.UserConfig config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats;
        break;
      }

      // optional .protbuf.UserStatistics stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storages;
        break;
      }

      // repeated .protbuf.Storage storages = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storages;
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserFullData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .IdField basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // required .protbuf.UserDetails details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->details(), output);
  }

  // optional .protbuf.UserConfig config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->config(), output);
  }

  // optional .protbuf.UserStatistics stats = 4;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->stats(), output);
  }

  // repeated .protbuf.Storage storages = 5;
  for (int i = 0; i < this->storages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->storages(i), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->password(), output);
  }

}

int UserFullData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IdField basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // required .protbuf.UserDetails details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

    // optional .protbuf.UserConfig config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional .protbuf.UserStatistics stats = 4;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  // repeated .protbuf.Storage storages = 5;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFullData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserFullData*>(&from));
}

void UserFullData::MergeFrom(const UserFullData& from) {
  GOOGLE_CHECK_NE(&from, this);
  storages_.MergeFrom(from.storages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::IdField::MergeFrom(from.basic());
    }
    if (from.has_details()) {
      mutable_details()->::protbuf::UserDetails::MergeFrom(from.details());
    }
    if (from.has_config()) {
      mutable_config()->::protbuf::UserConfig::MergeFrom(from.config());
    }
    if (from.has_stats()) {
      mutable_stats()->::protbuf::UserStatistics::MergeFrom(from.stats());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void UserFullData::CopyFrom(const UserFullData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFullData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  for (int i = 0; i < storages_size(); i++) {
    if (!this->storages(i).IsInitialized()) return false;
  }
  return true;
}

void UserFullData::Swap(UserFullData* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(details_, other->details_);
    std::swap(config_, other->config_);
    std::swap(stats_, other->stats_);
    storages_.Swap(&other->storages_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserFullData::GetTypeName() const {
  return "protbuf.UserFullData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)
