// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#ifndef PROTOBUF_item_2eproto__INCLUDED
#define PROTOBUF_item_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "user.pb.h"  // IWYU pragma: export
#include "group.pb.h"  // IWYU pragma: export
#include "package.pb.h"  // IWYU pragma: export
#include "parameters.pb.h"  // IWYU pragma: export
#include "common.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_item_2eproto();
void protobuf_AssignDesc_item_2eproto();
void protobuf_ShutdownFile_item_2eproto();

class ItemParameters;
class ItemBasicInfo;
class ItemDetails;
class ItemFullData;

// ===================================================================

class ItemParameters : public ::google::protobuf::MessageLite {
 public:
  ItemParameters();
  virtual ~ItemParameters();

  ItemParameters(const ItemParameters& from);

  inline ItemParameters& operator=(const ItemParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ItemParameters& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ItemParameters* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ItemParameters* other);

  // implements Message ----------------------------------------------

  ItemParameters* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ItemParameters& from);
  void MergeFrom(const ItemParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:protbuf.ItemParameters)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_item_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_item_2eproto();
  #endif
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static ItemParameters* default_instance_;
};
// -------------------------------------------------------------------

class ItemBasicInfo : public ::google::protobuf::MessageLite {
 public:
  ItemBasicInfo();
  virtual ~ItemBasicInfo();

  ItemBasicInfo(const ItemBasicInfo& from);

  inline ItemBasicInfo& operator=(const ItemBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ItemBasicInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ItemBasicInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ItemBasicInfo* other);

  // implements Message ----------------------------------------------

  ItemBasicInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ItemBasicInfo& from);
  void MergeFrom(const ItemBasicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string symbol = 3;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:protbuf.ItemBasicInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* symbol_;
  ::google::protobuf::uint32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_item_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_item_2eproto();
  #endif
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static ItemBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemDetails : public ::google::protobuf::MessageLite {
 public:
  ItemDetails();
  virtual ~ItemDetails();

  ItemDetails(const ItemDetails& from);

  inline ItemDetails& operator=(const ItemDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ItemDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ItemDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ItemDetails* other);

  // implements Message ----------------------------------------------

  ItemDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ItemDetails& from);
  void MergeFrom(const ItemDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required string name_space = 5;
  inline bool has_name_space() const;
  inline void clear_name_space();
  static const int kNameSpaceFieldNumber = 5;
  inline const ::std::string& name_space() const;
  inline void set_name_space(const ::std::string& value);
  inline void set_name_space(const char* value);
  inline void set_name_space(const char* value, size_t size);
  inline ::std::string* mutable_name_space();
  inline ::std::string* release_name_space();
  inline void set_allocated_name_space(::std::string* name_space);

  // required bool private_item = 6;
  inline bool has_private_item() const;
  inline void clear_private_item();
  static const int kPrivateItemFieldNumber = 6;
  inline bool private_item() const;
  inline void set_private_item(bool value);

  // optional uint32 package_id = 8;
  inline bool has_package_id() const;
  inline void clear_package_id();
  static const int kPackageIdFieldNumber = 8;
  inline ::google::protobuf::uint32 package_id() const;
  inline void set_package_id(::google::protobuf::uint32 value);

  // optional uint32 user_id = 9;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 9;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 group_id = 10;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 10;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .protbuf.ItemParameters parameters = 7;
  inline int parameters_size() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 7;
  inline const ::protbuf::ItemParameters& parameters(int index) const;
  inline ::protbuf::ItemParameters* mutable_parameters(int index);
  inline ::protbuf::ItemParameters* add_parameters();
  inline const ::google::protobuf::RepeatedPtrField< ::protbuf::ItemParameters >&
      parameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::protbuf::ItemParameters >*
      mutable_parameters();

  // @@protoc_insertion_point(class_scope:protbuf.ItemDetails)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name_space();
  inline void clear_has_name_space();
  inline void set_has_private_item();
  inline void clear_has_private_item();
  inline void set_has_package_id();
  inline void clear_has_package_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_;
  ::std::string* name_space_;
  bool private_item_;
  ::google::protobuf::uint32 package_id_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::RepeatedPtrField< ::protbuf::ItemParameters > parameters_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_item_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_item_2eproto();
  #endif
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static ItemDetails* default_instance_;
};
// -------------------------------------------------------------------

class ItemFullData : public ::google::protobuf::MessageLite {
 public:
  ItemFullData();
  virtual ~ItemFullData();

  ItemFullData(const ItemFullData& from);

  inline ItemFullData& operator=(const ItemFullData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ItemFullData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ItemFullData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ItemFullData* other);

  // implements Message ----------------------------------------------

  ItemFullData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ItemFullData& from);
  void MergeFrom(const ItemFullData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protbuf.ItemBasicInfo basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::protbuf::ItemBasicInfo& basic() const;
  inline ::protbuf::ItemBasicInfo* mutable_basic();
  inline ::protbuf::ItemBasicInfo* release_basic();
  inline void set_allocated_basic(::protbuf::ItemBasicInfo* basic);

  // required .protbuf.ItemDetails details = 2;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::protbuf::ItemDetails& details() const;
  inline ::protbuf::ItemDetails* mutable_details();
  inline ::protbuf::ItemDetails* release_details();
  inline void set_allocated_details(::protbuf::ItemDetails* details);

  // @@protoc_insertion_point(class_scope:protbuf.ItemFullData)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_details();
  inline void clear_has_details();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::protbuf::ItemBasicInfo* basic_;
  ::protbuf::ItemDetails* details_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_item_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_item_2eproto();
  #endif
  friend void protobuf_AssignDesc_item_2eproto();
  friend void protobuf_ShutdownFile_item_2eproto();

  void InitAsDefaultInstance();
  static ItemFullData* default_instance_;
};
// ===================================================================


// ===================================================================

// ItemParameters

// required uint32 id = 1;
inline bool ItemParameters::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemParameters::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemParameters::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemParameters::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ItemParameters::id() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemParameters.id)
  return id_;
}
inline void ItemParameters::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ItemParameters.id)
}

// required bytes value = 2;
inline bool ItemParameters::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemParameters::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemParameters::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemParameters::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ItemParameters::value() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemParameters.value)
  return *value_;
}
inline void ItemParameters::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ItemParameters.value)
}
inline void ItemParameters::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ItemParameters.value)
}
inline void ItemParameters::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ItemParameters.value)
}
inline ::std::string* ItemParameters::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ItemParameters.value)
  return value_;
}
inline ::std::string* ItemParameters::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemParameters::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemParameters.value)
}

// -------------------------------------------------------------------

// ItemBasicInfo

// required uint32 id = 1;
inline bool ItemBasicInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemBasicInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemBasicInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemBasicInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ItemBasicInfo::id() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemBasicInfo.id)
  return id_;
}
inline void ItemBasicInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ItemBasicInfo.id)
}

// optional string name = 2;
inline bool ItemBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemBasicInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ItemBasicInfo::name() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemBasicInfo.name)
  return *name_;
}
inline void ItemBasicInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ItemBasicInfo.name)
}
inline void ItemBasicInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ItemBasicInfo.name)
}
inline void ItemBasicInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ItemBasicInfo.name)
}
inline ::std::string* ItemBasicInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ItemBasicInfo.name)
  return name_;
}
inline ::std::string* ItemBasicInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemBasicInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemBasicInfo.name)
}

// optional string symbol = 3;
inline bool ItemBasicInfo::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemBasicInfo::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemBasicInfo::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemBasicInfo::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& ItemBasicInfo::symbol() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemBasicInfo.symbol)
  return *symbol_;
}
inline void ItemBasicInfo::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ItemBasicInfo.symbol)
}
inline void ItemBasicInfo::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ItemBasicInfo.symbol)
}
inline void ItemBasicInfo::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ItemBasicInfo.symbol)
}
inline ::std::string* ItemBasicInfo::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ItemBasicInfo.symbol)
  return symbol_;
}
inline ::std::string* ItemBasicInfo::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemBasicInfo::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemBasicInfo.symbol)
}

// -------------------------------------------------------------------

// ItemDetails

// optional string description = 2;
inline bool ItemDetails::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemDetails::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemDetails::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemDetails::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ItemDetails::description() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.description)
  return *description_;
}
inline void ItemDetails::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ItemDetails.description)
}
inline void ItemDetails::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ItemDetails.description)
}
inline void ItemDetails::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ItemDetails.description)
}
inline ::std::string* ItemDetails::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ItemDetails.description)
  return description_;
}
inline ::std::string* ItemDetails::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemDetails::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemDetails.description)
}

// required string name_space = 5;
inline bool ItemDetails::has_name_space() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemDetails::set_has_name_space() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemDetails::clear_has_name_space() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemDetails::clear_name_space() {
  if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_space_->clear();
  }
  clear_has_name_space();
}
inline const ::std::string& ItemDetails::name_space() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.name_space)
  return *name_space_;
}
inline void ItemDetails::set_name_space(const ::std::string& value) {
  set_has_name_space();
  if (name_space_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_space_ = new ::std::string;
  }
  name_space_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.ItemDetails.name_space)
}
inline void ItemDetails::set_name_space(const char* value) {
  set_has_name_space();
  if (name_space_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_space_ = new ::std::string;
  }
  name_space_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.ItemDetails.name_space)
}
inline void ItemDetails::set_name_space(const char* value, size_t size) {
  set_has_name_space();
  if (name_space_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_space_ = new ::std::string;
  }
  name_space_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.ItemDetails.name_space)
}
inline ::std::string* ItemDetails::mutable_name_space() {
  set_has_name_space();
  if (name_space_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_space_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.ItemDetails.name_space)
  return name_space_;
}
inline ::std::string* ItemDetails::release_name_space() {
  clear_has_name_space();
  if (name_space_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_space_;
    name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ItemDetails::set_allocated_name_space(::std::string* name_space) {
  if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_space_;
  }
  if (name_space) {
    set_has_name_space();
    name_space_ = name_space;
  } else {
    clear_has_name_space();
    name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemDetails.name_space)
}

// required bool private_item = 6;
inline bool ItemDetails::has_private_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemDetails::set_has_private_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemDetails::clear_has_private_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemDetails::clear_private_item() {
  private_item_ = false;
  clear_has_private_item();
}
inline bool ItemDetails::private_item() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.private_item)
  return private_item_;
}
inline void ItemDetails::set_private_item(bool value) {
  set_has_private_item();
  private_item_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ItemDetails.private_item)
}

// optional uint32 package_id = 8;
inline bool ItemDetails::has_package_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemDetails::set_has_package_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemDetails::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemDetails::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
inline ::google::protobuf::uint32 ItemDetails::package_id() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.package_id)
  return package_id_;
}
inline void ItemDetails::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ItemDetails.package_id)
}

// optional uint32 user_id = 9;
inline bool ItemDetails::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemDetails::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemDetails::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemDetails::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 ItemDetails::user_id() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.user_id)
  return user_id_;
}
inline void ItemDetails::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ItemDetails.user_id)
}

// optional uint32 group_id = 10;
inline bool ItemDetails::has_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemDetails::set_has_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemDetails::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemDetails::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 ItemDetails::group_id() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.group_id)
  return group_id_;
}
inline void ItemDetails::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.ItemDetails.group_id)
}

// repeated .protbuf.ItemParameters parameters = 7;
inline int ItemDetails::parameters_size() const {
  return parameters_.size();
}
inline void ItemDetails::clear_parameters() {
  parameters_.Clear();
}
inline const ::protbuf::ItemParameters& ItemDetails::parameters(int index) const {
  // @@protoc_insertion_point(field_get:protbuf.ItemDetails.parameters)
  return parameters_.Get(index);
}
inline ::protbuf::ItemParameters* ItemDetails::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:protbuf.ItemDetails.parameters)
  return parameters_.Mutable(index);
}
inline ::protbuf::ItemParameters* ItemDetails::add_parameters() {
  // @@protoc_insertion_point(field_add:protbuf.ItemDetails.parameters)
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protbuf::ItemParameters >&
ItemDetails::parameters() const {
  // @@protoc_insertion_point(field_list:protbuf.ItemDetails.parameters)
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::protbuf::ItemParameters >*
ItemDetails::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:protbuf.ItemDetails.parameters)
  return &parameters_;
}

// -------------------------------------------------------------------

// ItemFullData

// required .protbuf.ItemBasicInfo basic = 1;
inline bool ItemFullData::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemFullData::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemFullData::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemFullData::clear_basic() {
  if (basic_ != NULL) basic_->::protbuf::ItemBasicInfo::Clear();
  clear_has_basic();
}
inline const ::protbuf::ItemBasicInfo& ItemFullData::basic() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemFullData.basic)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return basic_ != NULL ? *basic_ : *default_instance().basic_;
#else
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
#endif
}
inline ::protbuf::ItemBasicInfo* ItemFullData::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::protbuf::ItemBasicInfo;
  // @@protoc_insertion_point(field_mutable:protbuf.ItemFullData.basic)
  return basic_;
}
inline ::protbuf::ItemBasicInfo* ItemFullData::release_basic() {
  clear_has_basic();
  ::protbuf::ItemBasicInfo* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void ItemFullData::set_allocated_basic(::protbuf::ItemBasicInfo* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemFullData.basic)
}

// required .protbuf.ItemDetails details = 2;
inline bool ItemFullData::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemFullData::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemFullData::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemFullData::clear_details() {
  if (details_ != NULL) details_->::protbuf::ItemDetails::Clear();
  clear_has_details();
}
inline const ::protbuf::ItemDetails& ItemFullData::details() const {
  // @@protoc_insertion_point(field_get:protbuf.ItemFullData.details)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return details_ != NULL ? *details_ : *default_instance().details_;
#else
  return details_ != NULL ? *details_ : *default_instance_->details_;
#endif
}
inline ::protbuf::ItemDetails* ItemFullData::mutable_details() {
  set_has_details();
  if (details_ == NULL) details_ = new ::protbuf::ItemDetails;
  // @@protoc_insertion_point(field_mutable:protbuf.ItemFullData.details)
  return details_;
}
inline ::protbuf::ItemDetails* ItemFullData::release_details() {
  clear_has_details();
  ::protbuf::ItemDetails* temp = details_;
  details_ = NULL;
  return temp;
}
inline void ItemFullData::set_allocated_details(::protbuf::ItemDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.ItemFullData.details)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_item_2eproto__INCLUDED
