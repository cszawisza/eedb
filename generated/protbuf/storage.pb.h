// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef PROTOBUF_storage_2eproto__INCLUDED
#define PROTOBUF_storage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_storage_2eproto();
void protobuf_AssignDesc_storage_2eproto();
void protobuf_ShutdownFile_storage_2eproto();

class StorageStatistics;
class Storage;

// ===================================================================

class StorageStatistics : public ::google::protobuf::MessageLite {
 public:
  StorageStatistics();
  virtual ~StorageStatistics();

  StorageStatistics(const StorageStatistics& from);

  inline StorageStatistics& operator=(const StorageStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  static const StorageStatistics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageStatistics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageStatistics* other);

  // implements Message ----------------------------------------------

  StorageStatistics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageStatistics& from);
  void MergeFrom(const StorageStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protbuf.StorageStatistics)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageStatistics* default_instance_;
};
// -------------------------------------------------------------------

class Storage : public ::google::protobuf::MessageLite {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }

  static const Storage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Storage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Storage* other);

  // implements Message ----------------------------------------------

  Storage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IdField basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::IdField& basic() const;
  inline ::IdField* mutable_basic();
  inline ::IdField* release_basic();
  inline void set_allocated_basic(::IdField* basic);

  // optional .Details details = 2;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::Details& details() const;
  inline ::Details* mutable_details();
  inline ::Details* release_details();
  inline void set_allocated_details(::Details* details);

  // optional uint32 owner_id = 3;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protbuf.Storage)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_details();
  inline void clear_has_details();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();

  ::IdField* basic_;
  ::Details* details_;
  ::google::protobuf::uint32 owner_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static Storage* default_instance_;
};
// ===================================================================


// ===================================================================

// StorageStatistics

// -------------------------------------------------------------------

// Storage

// required .IdField basic = 1;
inline bool Storage::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Storage::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Storage::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Storage::clear_basic() {
  if (basic_ != NULL) basic_->::IdField::Clear();
  clear_has_basic();
}
inline const ::IdField& Storage::basic() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return basic_ != NULL ? *basic_ : *default_instance().basic_;
#else
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
#endif
}
inline ::IdField* Storage::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::IdField;
  return basic_;
}
inline ::IdField* Storage::release_basic() {
  clear_has_basic();
  ::IdField* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void Storage::set_allocated_basic(::IdField* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
}

// optional .Details details = 2;
inline bool Storage::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Storage::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Storage::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Storage::clear_details() {
  if (details_ != NULL) details_->::Details::Clear();
  clear_has_details();
}
inline const ::Details& Storage::details() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return details_ != NULL ? *details_ : *default_instance().details_;
#else
  return details_ != NULL ? *details_ : *default_instance_->details_;
#endif
}
inline ::Details* Storage::mutable_details() {
  set_has_details();
  if (details_ == NULL) details_ = new ::Details;
  return details_;
}
inline ::Details* Storage::release_details() {
  clear_has_details();
  ::Details* temp = details_;
  details_ = NULL;
  return temp;
}
inline void Storage::set_allocated_details(::Details* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
}

// optional uint32 owner_id = 3;
inline bool Storage::has_owner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Storage::set_has_owner_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Storage::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Storage::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
inline ::google::protobuf::uint32 Storage::owner_id() const {
  return owner_id_;
}
inline void Storage::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2eproto__INCLUDED
