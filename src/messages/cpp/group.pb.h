// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef PROTOBUF_group_2eproto__INCLUDED
#define PROTOBUF_group_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "parameters.pb.h"  // IWYU pragma: export
#include "common.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_group_2eproto();
void protobuf_AssignDesc_group_2eproto();
void protobuf_ShutdownFile_group_2eproto();

class GroupDetails;
class GroupBasicInfo;
class GroupFullData;

// ===================================================================

class GroupDetails : public ::google::protobuf::MessageLite {
 public:
  GroupDetails();
  virtual ~GroupDetails();

  GroupDetails(const GroupDetails& from);

  inline GroupDetails& operator=(const GroupDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GroupDetails& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GroupDetails* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GroupDetails* other);

  // implements Message ----------------------------------------------

  GroupDetails* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GroupDetails& from);
  void MergeFrom(const GroupDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 1;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 1;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // repeated uint32 parameters_id = 2;
  inline int parameters_id_size() const;
  inline void clear_parameters_id();
  static const int kParametersIdFieldNumber = 2;
  inline ::google::protobuf::uint32 parameters_id(int index) const;
  inline void set_parameters_id(int index, ::google::protobuf::uint32 value);
  inline void add_parameters_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      parameters_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_parameters_id();

  // required bool allow_sets = 3;
  inline bool has_allow_sets() const;
  inline void clear_allow_sets();
  static const int kAllowSetsFieldNumber = 3;
  inline bool allow_sets() const;
  inline void set_allow_sets(bool value);

  // required bool allow_items = 4;
  inline bool has_allow_items() const;
  inline void clear_allow_items();
  static const int kAllowItemsFieldNumber = 4;
  inline bool allow_items() const;
  inline void set_allow_items(bool value);

  // @@protoc_insertion_point(class_scope:protbuf.GroupDetails)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_allow_sets();
  inline void clear_has_allow_sets();
  inline void set_has_allow_items();
  inline void clear_has_allow_items();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* description_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > parameters_id_;
  bool allow_sets_;
  bool allow_items_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_group_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_group_2eproto();
  #endif
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupDetails* default_instance_;
};
// -------------------------------------------------------------------

class GroupBasicInfo : public ::google::protobuf::MessageLite {
 public:
  GroupBasicInfo();
  virtual ~GroupBasicInfo();

  GroupBasicInfo(const GroupBasicInfo& from);

  inline GroupBasicInfo& operator=(const GroupBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GroupBasicInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GroupBasicInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GroupBasicInfo* other);

  // implements Message ----------------------------------------------

  GroupBasicInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GroupBasicInfo& from);
  void MergeFrom(const GroupBasicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::uint32 parent_id() const;
  inline void set_parent_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protbuf.GroupBasicInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 parent_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_group_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_group_2eproto();
  #endif
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupFullData : public ::google::protobuf::MessageLite {
 public:
  GroupFullData();
  virtual ~GroupFullData();

  GroupFullData(const GroupFullData& from);

  inline GroupFullData& operator=(const GroupFullData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const GroupFullData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GroupFullData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GroupFullData* other);

  // implements Message ----------------------------------------------

  GroupFullData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GroupFullData& from);
  void MergeFrom(const GroupFullData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protbuf.GroupBasicInfo basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::protbuf::GroupBasicInfo& basic() const;
  inline ::protbuf::GroupBasicInfo* mutable_basic();
  inline ::protbuf::GroupBasicInfo* release_basic();
  inline void set_allocated_basic(::protbuf::GroupBasicInfo* basic);

  // optional .protbuf.GroupDetails details = 2;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::protbuf::GroupDetails& details() const;
  inline ::protbuf::GroupDetails* mutable_details();
  inline ::protbuf::GroupDetails* release_details();
  inline void set_allocated_details(::protbuf::GroupDetails* details);

  // @@protoc_insertion_point(class_scope:protbuf.GroupFullData)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_details();
  inline void clear_has_details();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::protbuf::GroupBasicInfo* basic_;
  ::protbuf::GroupDetails* details_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_group_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_group_2eproto();
  #endif
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupFullData* default_instance_;
};
// ===================================================================


// ===================================================================

// GroupDetails

// optional string description = 1;
inline bool GroupDetails::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupDetails::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupDetails::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupDetails::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& GroupDetails::description() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupDetails.description)
  return *description_;
}
inline void GroupDetails::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.GroupDetails.description)
}
inline void GroupDetails::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.GroupDetails.description)
}
inline void GroupDetails::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.GroupDetails.description)
}
inline ::std::string* GroupDetails::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.GroupDetails.description)
  return description_;
}
inline ::std::string* GroupDetails::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupDetails::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.GroupDetails.description)
}

// repeated uint32 parameters_id = 2;
inline int GroupDetails::parameters_id_size() const {
  return parameters_id_.size();
}
inline void GroupDetails::clear_parameters_id() {
  parameters_id_.Clear();
}
inline ::google::protobuf::uint32 GroupDetails::parameters_id(int index) const {
  // @@protoc_insertion_point(field_get:protbuf.GroupDetails.parameters_id)
  return parameters_id_.Get(index);
}
inline void GroupDetails::set_parameters_id(int index, ::google::protobuf::uint32 value) {
  parameters_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:protbuf.GroupDetails.parameters_id)
}
inline void GroupDetails::add_parameters_id(::google::protobuf::uint32 value) {
  parameters_id_.Add(value);
  // @@protoc_insertion_point(field_add:protbuf.GroupDetails.parameters_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GroupDetails::parameters_id() const {
  // @@protoc_insertion_point(field_list:protbuf.GroupDetails.parameters_id)
  return parameters_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GroupDetails::mutable_parameters_id() {
  // @@protoc_insertion_point(field_mutable_list:protbuf.GroupDetails.parameters_id)
  return &parameters_id_;
}

// required bool allow_sets = 3;
inline bool GroupDetails::has_allow_sets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupDetails::set_has_allow_sets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupDetails::clear_has_allow_sets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupDetails::clear_allow_sets() {
  allow_sets_ = false;
  clear_has_allow_sets();
}
inline bool GroupDetails::allow_sets() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupDetails.allow_sets)
  return allow_sets_;
}
inline void GroupDetails::set_allow_sets(bool value) {
  set_has_allow_sets();
  allow_sets_ = value;
  // @@protoc_insertion_point(field_set:protbuf.GroupDetails.allow_sets)
}

// required bool allow_items = 4;
inline bool GroupDetails::has_allow_items() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupDetails::set_has_allow_items() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupDetails::clear_has_allow_items() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupDetails::clear_allow_items() {
  allow_items_ = false;
  clear_has_allow_items();
}
inline bool GroupDetails::allow_items() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupDetails.allow_items)
  return allow_items_;
}
inline void GroupDetails::set_allow_items(bool value) {
  set_has_allow_items();
  allow_items_ = value;
  // @@protoc_insertion_point(field_set:protbuf.GroupDetails.allow_items)
}

// -------------------------------------------------------------------

// GroupBasicInfo

// required uint32 id = 1;
inline bool GroupBasicInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupBasicInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupBasicInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupBasicInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GroupBasicInfo::id() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupBasicInfo.id)
  return id_;
}
inline void GroupBasicInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.GroupBasicInfo.id)
}

// required string name = 2;
inline bool GroupBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupBasicInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupBasicInfo::name() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupBasicInfo.name)
  return *name_;
}
inline void GroupBasicInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.GroupBasicInfo.name)
}
inline void GroupBasicInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.GroupBasicInfo.name)
}
inline void GroupBasicInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.GroupBasicInfo.name)
}
inline ::std::string* GroupBasicInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.GroupBasicInfo.name)
  return name_;
}
inline ::std::string* GroupBasicInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GroupBasicInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.GroupBasicInfo.name)
}

// required uint32 parent_id = 3;
inline bool GroupBasicInfo::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupBasicInfo::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupBasicInfo::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupBasicInfo::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
inline ::google::protobuf::uint32 GroupBasicInfo::parent_id() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupBasicInfo.parent_id)
  return parent_id_;
}
inline void GroupBasicInfo::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.GroupBasicInfo.parent_id)
}

// -------------------------------------------------------------------

// GroupFullData

// optional .protbuf.GroupBasicInfo basic = 1;
inline bool GroupFullData::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupFullData::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupFullData::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupFullData::clear_basic() {
  if (basic_ != NULL) basic_->::protbuf::GroupBasicInfo::Clear();
  clear_has_basic();
}
inline const ::protbuf::GroupBasicInfo& GroupFullData::basic() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupFullData.basic)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return basic_ != NULL ? *basic_ : *default_instance().basic_;
#else
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
#endif
}
inline ::protbuf::GroupBasicInfo* GroupFullData::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::protbuf::GroupBasicInfo;
  // @@protoc_insertion_point(field_mutable:protbuf.GroupFullData.basic)
  return basic_;
}
inline ::protbuf::GroupBasicInfo* GroupFullData::release_basic() {
  clear_has_basic();
  ::protbuf::GroupBasicInfo* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void GroupFullData::set_allocated_basic(::protbuf::GroupBasicInfo* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.GroupFullData.basic)
}

// optional .protbuf.GroupDetails details = 2;
inline bool GroupFullData::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupFullData::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupFullData::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupFullData::clear_details() {
  if (details_ != NULL) details_->::protbuf::GroupDetails::Clear();
  clear_has_details();
}
inline const ::protbuf::GroupDetails& GroupFullData::details() const {
  // @@protoc_insertion_point(field_get:protbuf.GroupFullData.details)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return details_ != NULL ? *details_ : *default_instance().details_;
#else
  return details_ != NULL ? *details_ : *default_instance_->details_;
#endif
}
inline ::protbuf::GroupDetails* GroupFullData::mutable_details() {
  set_has_details();
  if (details_ == NULL) details_ = new ::protbuf::GroupDetails;
  // @@protoc_insertion_point(field_mutable:protbuf.GroupFullData.details)
  return details_;
}
inline ::protbuf::GroupDetails* GroupFullData::release_details() {
  clear_has_details();
  ::protbuf::GroupDetails* temp = details_;
  details_ = NULL;
  return temp;
}
inline void GroupFullData::set_allocated_details(::protbuf::GroupDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.GroupFullData.details)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_group_2eproto__INCLUDED
