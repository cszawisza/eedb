// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

void protobuf_ShutdownFile_group_2eproto() {
  delete GroupDetails::default_instance_;
  delete GroupBasicInfo::default_instance_;
  delete GroupFullData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_group_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_group_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protbuf::protobuf_AddDesc_parameters_2eproto();
  ::protobuf_AddDesc_common_2eproto();
  GroupDetails::default_instance_ = new GroupDetails();
  GroupBasicInfo::default_instance_ = new GroupBasicInfo();
  GroupFullData::default_instance_ = new GroupFullData();
  GroupDetails::default_instance_->InitAsDefaultInstance();
  GroupBasicInfo::default_instance_->InitAsDefaultInstance();
  GroupFullData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_group_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_group_2eproto_once_);
void protobuf_AddDesc_group_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_group_2eproto_once_,
                 &protobuf_AddDesc_group_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_group_2eproto {
  StaticDescriptorInitializer_group_2eproto() {
    protobuf_AddDesc_group_2eproto();
  }
} static_descriptor_initializer_group_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GroupDetails::kDescriptionFieldNumber;
const int GroupDetails::kParametersIdFieldNumber;
const int GroupDetails::kAllowSetsFieldNumber;
const int GroupDetails::kAllowItemsFieldNumber;
#endif  // !_MSC_VER

GroupDetails::GroupDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.GroupDetails)
}

void GroupDetails::InitAsDefaultInstance() {
}

GroupDetails::GroupDetails(const GroupDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.GroupDetails)
}

void GroupDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_sets_ = false;
  allow_items_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDetails::~GroupDetails() {
  // @@protoc_insertion_point(destructor:protbuf.GroupDetails)
  SharedDtor();
}

void GroupDetails::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupDetails& GroupDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
#endif
  return *default_instance_;
}

GroupDetails* GroupDetails::default_instance_ = NULL;

GroupDetails* GroupDetails::New() const {
  return new GroupDetails;
}

void GroupDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(allow_sets_, allow_items_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  parameters_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.GroupDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parameters_id;
        break;
      }

      // repeated uint32 parameters_id = 2;
      case 2: {
        if (tag == 16) {
         parse_parameters_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_parameters_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_parameters_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parameters_id;
        if (input->ExpectTag(24)) goto parse_allow_sets;
        break;
      }

      // required bool allow_sets = 3;
      case 3: {
        if (tag == 24) {
         parse_allow_sets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_sets_)));
          set_has_allow_sets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allow_items;
        break;
      }

      // required bool allow_items = 4;
      case 4: {
        if (tag == 32) {
         parse_allow_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_items_)));
          set_has_allow_items();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.GroupDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.GroupDetails)
  return false;
#undef DO_
}

void GroupDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.GroupDetails)
  // optional string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // repeated uint32 parameters_id = 2;
  for (int i = 0; i < this->parameters_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->parameters_id(i), output);
  }

  // required bool allow_sets = 3;
  if (has_allow_sets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_sets(), output);
  }

  // required bool allow_items = 4;
  if (has_allow_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->allow_items(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.GroupDetails)
}

int GroupDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required bool allow_sets = 3;
    if (has_allow_sets()) {
      total_size += 1 + 1;
    }

    // required bool allow_items = 4;
    if (has_allow_items()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 parameters_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->parameters_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->parameters_id(i));
    }
    total_size += 1 * this->parameters_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupDetails*>(&from));
}

void GroupDetails::MergeFrom(const GroupDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_id_.MergeFrom(from.parameters_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_allow_sets()) {
      set_allow_sets(from.allow_sets());
    }
    if (from.has_allow_items()) {
      set_allow_items(from.allow_items());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupDetails::CopyFrom(const GroupDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void GroupDetails::Swap(GroupDetails* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    parameters_id_.Swap(&other->parameters_id_);
    std::swap(allow_sets_, other->allow_sets_);
    std::swap(allow_items_, other->allow_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupDetails::GetTypeName() const {
  return "protbuf.GroupDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupBasicInfo::kIdFieldNumber;
const int GroupBasicInfo::kNameFieldNumber;
const int GroupBasicInfo::kParentIdFieldNumber;
#endif  // !_MSC_VER

GroupBasicInfo::GroupBasicInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.GroupBasicInfo)
}

void GroupBasicInfo::InitAsDefaultInstance() {
}

GroupBasicInfo::GroupBasicInfo(const GroupBasicInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.GroupBasicInfo)
}

void GroupBasicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBasicInfo::~GroupBasicInfo() {
  // @@protoc_insertion_point(destructor:protbuf.GroupBasicInfo)
  SharedDtor();
}

void GroupBasicInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupBasicInfo& GroupBasicInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
#endif
  return *default_instance_;
}

GroupBasicInfo* GroupBasicInfo::default_instance_ = NULL;

GroupBasicInfo* GroupBasicInfo::New() const {
  return new GroupBasicInfo;
}

void GroupBasicInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupBasicInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, parent_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.GroupBasicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }

      // required uint32 parent_id = 3;
      case 3: {
        if (tag == 24) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.GroupBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.GroupBasicInfo)
  return false;
#undef DO_
}

void GroupBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.GroupBasicInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->parent_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.GroupBasicInfo)
}

int GroupBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBasicInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupBasicInfo*>(&from));
}

void GroupBasicInfo::MergeFrom(const GroupBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupBasicInfo::CopyFrom(const GroupBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupBasicInfo::Swap(GroupBasicInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupBasicInfo::GetTypeName() const {
  return "protbuf.GroupBasicInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupFullData::kBasicFieldNumber;
const int GroupFullData::kDetailsFieldNumber;
#endif  // !_MSC_VER

GroupFullData::GroupFullData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.GroupFullData)
}

void GroupFullData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::protbuf::GroupBasicInfo*>(
      ::protbuf::GroupBasicInfo::internal_default_instance());
#else
  basic_ = const_cast< ::protbuf::GroupBasicInfo*>(&::protbuf::GroupBasicInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  details_ = const_cast< ::protbuf::GroupDetails*>(
      ::protbuf::GroupDetails::internal_default_instance());
#else
  details_ = const_cast< ::protbuf::GroupDetails*>(&::protbuf::GroupDetails::default_instance());
#endif
}

GroupFullData::GroupFullData(const GroupFullData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.GroupFullData)
}

void GroupFullData::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupFullData::~GroupFullData() {
  // @@protoc_insertion_point(destructor:protbuf.GroupFullData)
  SharedDtor();
}

void GroupFullData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
    delete details_;
  }
}

void GroupFullData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupFullData& GroupFullData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
#endif
  return *default_instance_;
}

GroupFullData* GroupFullData::default_instance_ = NULL;

GroupFullData* GroupFullData::New() const {
  return new GroupFullData;
}

void GroupFullData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::protbuf::GroupBasicInfo::Clear();
    }
    if (has_details()) {
      if (details_ != NULL) details_->::protbuf::GroupDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GroupFullData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.GroupFullData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protbuf.GroupBasicInfo basic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // optional .protbuf.GroupDetails details = 2;
      case 2: {
        if (tag == 18) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.GroupFullData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.GroupFullData)
  return false;
#undef DO_
}

void GroupFullData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.GroupFullData)
  // optional .protbuf.GroupBasicInfo basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // optional .protbuf.GroupDetails details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->details(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.GroupFullData)
}

int GroupFullData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protbuf.GroupBasicInfo basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional .protbuf.GroupDetails details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupFullData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupFullData*>(&from));
}

void GroupFullData::MergeFrom(const GroupFullData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::protbuf::GroupBasicInfo::MergeFrom(from.basic());
    }
    if (from.has_details()) {
      mutable_details()->::protbuf::GroupDetails::MergeFrom(from.details());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GroupFullData::CopyFrom(const GroupFullData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupFullData::IsInitialized() const {

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void GroupFullData::Swap(GroupFullData* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupFullData::GetTypeName() const {
  return "protbuf.GroupFullData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)
