// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_conteiner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_conteiner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

void protobuf_ShutdownFile_message_5fconteiner_2eproto() {
  delete ClientRequests::default_instance_;
  delete ClientRequest::default_instance_;
  delete ServerResponses::default_instance_;
  delete ServerResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_message_5fconteiner_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_message_5fconteiner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_common_2eproto();
  ::user::protobuf_AddDesc_user_2eproto();
  ClientRequests::default_instance_ = new ClientRequests();
  ClientRequest::default_instance_ = new ClientRequest();
  ServerResponses::default_instance_ = new ServerResponses();
  ServerResponse::default_instance_ = new ServerResponse();
  ClientRequests::default_instance_->InitAsDefaultInstance();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ServerResponses::default_instance_->InitAsDefaultInstance();
  ServerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fconteiner_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_5fconteiner_2eproto_once_);
void protobuf_AddDesc_message_5fconteiner_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_5fconteiner_2eproto_once_,
                 &protobuf_AddDesc_message_5fconteiner_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fconteiner_2eproto {
  StaticDescriptorInitializer_message_5fconteiner_2eproto() {
    protobuf_AddDesc_message_5fconteiner_2eproto();
  }
} static_descriptor_initializer_message_5fconteiner_2eproto_;
#endif
bool MsgCoding_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool MsgTypeId_IsValid(int value) {
  switch(value) {
    case 0:
    case 12:
    case 13:
    case 100:
      return true;
    default:
      return false;
  }
}

bool ServerErrorCodes_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRequests::kRequestFieldNumber;
#endif  // !_MSC_VER

ClientRequests::ClientRequests()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ClientRequests)
}

void ClientRequests::InitAsDefaultInstance() {
}

ClientRequests::ClientRequests(const ClientRequests& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ClientRequests)
}

void ClientRequests::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequests::~ClientRequests() {
  // @@protoc_insertion_point(destructor:protbuf.ClientRequests)
  SharedDtor();
}

void ClientRequests::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientRequests::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientRequests& ClientRequests::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

ClientRequests* ClientRequests::default_instance_ = NULL;

ClientRequests* ClientRequests::New() const {
  return new ClientRequests;
}

void ClientRequests::Clear() {
  request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientRequests::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ClientRequests)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protbuf.ClientRequest request = 1;
      case 1: {
        if (tag == 10) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_request;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ClientRequests)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ClientRequests)
  return false;
#undef DO_
}

void ClientRequests::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ClientRequests)
  // repeated .protbuf.ClientRequest request = 1;
  for (int i = 0; i < this->request_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->request(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ClientRequests)
}

int ClientRequests::ByteSize() const {
  int total_size = 0;

  // repeated .protbuf.ClientRequest request = 1;
  total_size += 1 * this->request_size();
  for (int i = 0; i < this->request_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequests::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientRequests*>(&from));
}

void ClientRequests::MergeFrom(const ClientRequests& from) {
  GOOGLE_CHECK_NE(&from, this);
  request_.MergeFrom(from.request_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientRequests::CopyFrom(const ClientRequests& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequests::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->request())) return false;
  return true;
}

void ClientRequests::Swap(ClientRequests* other) {
  if (other != this) {
    request_.Swap(&other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientRequests::GetTypeName() const {
  return "protbuf.ClientRequests";
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRequest::kRequestIdFieldNumber;
const int ClientRequest::kMsgUserReqFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ClientRequest)
}

void ClientRequest::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_data();
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:protbuf.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientRequest& ClientRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New() const {
  return new ClientRequest;
}

void ClientRequest::clear_data() {
  switch(data_case()) {
    case kMsgUserReq: {
      delete data_.msguserreq_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ClientRequest::Clear() {
  requestid_ = 1u;
  clear_data();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 requestId = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_msgUserReq;
        break;
      }

      // optional .user.MsgUserRequest msgUserReq = 12;
      case 12: {
        if (tag == 98) {
         parse_msgUserReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguserreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ClientRequest)
  // optional uint32 requestId = 1 [default = 1];
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // optional .user.MsgUserRequest msgUserReq = 12;
  if (has_msguserreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->msguserreq(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ClientRequest)
}

int ClientRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 requestId = 1 [default = 1];
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }

  }
  switch (data_case()) {
    // optional .user.MsgUserRequest msgUserReq = 12;
    case kMsgUserReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguserreq());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientRequest*>(&from));
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.data_case()) {
    case kMsgUserReq: {
      mutable_msguserreq()->::user::MsgUserRequest::MergeFrom(from.msguserreq());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {

  if (has_msguserreq()) {
    if (!this->msguserreq().IsInitialized()) return false;
  }
  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(data_, other->data_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ClientRequest::GetTypeName() const {
  return "protbuf.ClientRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerResponses::kResponseFieldNumber;
#endif  // !_MSC_VER

ServerResponses::ServerResponses()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ServerResponses)
}

void ServerResponses::InitAsDefaultInstance() {
}

ServerResponses::ServerResponses(const ServerResponses& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ServerResponses)
}

void ServerResponses::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerResponses::~ServerResponses() {
  // @@protoc_insertion_point(destructor:protbuf.ServerResponses)
  SharedDtor();
}

void ServerResponses::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerResponses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerResponses& ServerResponses::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

ServerResponses* ServerResponses::default_instance_ = NULL;

ServerResponses* ServerResponses::New() const {
  return new ServerResponses;
}

void ServerResponses::Clear() {
  response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerResponses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ServerResponses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protbuf.ServerResponse response = 1;
      case 1: {
        if (tag == 10) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_response;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ServerResponses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ServerResponses)
  return false;
#undef DO_
}

void ServerResponses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ServerResponses)
  // repeated .protbuf.ServerResponse response = 1;
  for (int i = 0; i < this->response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->response(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ServerResponses)
}

int ServerResponses::ByteSize() const {
  int total_size = 0;

  // repeated .protbuf.ServerResponse response = 1;
  total_size += 1 * this->response_size();
  for (int i = 0; i < this->response_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->response(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponses::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerResponses*>(&from));
}

void ServerResponses::MergeFrom(const ServerResponses& from) {
  GOOGLE_CHECK_NE(&from, this);
  response_.MergeFrom(from.response_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerResponses::CopyFrom(const ServerResponses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponses::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->response())) return false;
  return true;
}

void ServerResponses::Swap(ServerResponses* other) {
  if (other != this) {
    response_.Swap(&other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerResponses::GetTypeName() const {
  return "protbuf.ServerResponses";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerResponse::kCodesFieldNumber;
const int ServerResponse::kResponseIdFieldNumber;
const int ServerResponse::kMsgUserResFieldNumber;
const int ServerResponse::kMsgServerResponseFieldNumber;
#endif  // !_MSC_VER

ServerResponse::ServerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ServerResponse)
}

void ServerResponse::InitAsDefaultInstance() {
}

ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ServerResponse)
}

void ServerResponse::SharedCtor() {
  _cached_size_ = 0;
  responseid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_data();
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:protbuf.ServerResponse)
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerResponse& ServerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

ServerResponse* ServerResponse::default_instance_ = NULL;

ServerResponse* ServerResponse::New() const {
  return new ServerResponse;
}

void ServerResponse::clear_data() {
  switch(data_case()) {
    case kMsgUserRes: {
      delete data_.msguserres_;
      break;
    }
    case kMsgServerResponse: {
      delete data_.msgserverresponse_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ServerResponse::Clear() {
  responseid_ = 0u;
  codes_.Clear();
  clear_data();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ResponseCode codes = 1;
      case 1: {
        if (tag == 10) {
         parse_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_codes;
        if (input->ExpectTag(16)) goto parse_responseId;
        break;
      }

      // optional uint32 responseId = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_responseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &responseid_)));
          set_has_responseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_msgUserRes;
        break;
      }

      // optional .user.MsgUserResponse msgUserRes = 13;
      case 13: {
        if (tag == 106) {
         parse_msgUserRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msguserres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_msgServerResponse;
        break;
      }

      // optional .protbuf.ServerResponse msgServerResponse = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_msgServerResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgserverresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ServerResponse)
  return false;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ServerResponse)
  // repeated .ResponseCode codes = 1;
  for (int i = 0; i < this->codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->codes(i), output);
  }

  // optional uint32 responseId = 2 [default = 0];
  if (has_responseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->responseid(), output);
  }

  // optional .user.MsgUserResponse msgUserRes = 13;
  if (has_msguserres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->msguserres(), output);
  }

  // optional .protbuf.ServerResponse msgServerResponse = 1000;
  if (has_msgserverresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, this->msgserverresponse(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ServerResponse)
}

int ServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 responseId = 2 [default = 0];
    if (has_responseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->responseid());
    }

  }
  // repeated .ResponseCode codes = 1;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  switch (data_case()) {
    // optional .user.MsgUserResponse msgUserRes = 13;
    case kMsgUserRes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msguserres());
      break;
    }
    // optional .protbuf.ServerResponse msgServerResponse = 1000;
    case kMsgServerResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgserverresponse());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerResponse*>(&from));
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  codes_.MergeFrom(from.codes_);
  switch (from.data_case()) {
    case kMsgUserRes: {
      mutable_msguserres()->::user::MsgUserResponse::MergeFrom(from.msguserres());
      break;
    }
    case kMsgServerResponse: {
      mutable_msgserverresponse()->::protbuf::ServerResponse::MergeFrom(from.msgserverresponse());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_responseid()) {
      set_responseid(from.responseid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {

  if (has_msguserres()) {
    if (!this->msguserres().IsInitialized()) return false;
  }
  if (has_msgserverresponse()) {
    if (!this->msgserverresponse().IsInitialized()) return false;
  }
  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other != this) {
    codes_.Swap(&other->codes_);
    std::swap(responseid_, other->responseid_);
    std::swap(data_, other->data_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerResponse::GetTypeName() const {
  return "protbuf.ServerResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)
