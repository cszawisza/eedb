// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package.proto

#ifndef PROTOBUF_package_2eproto__INCLUDED
#define PROTOBUF_package_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_package_2eproto();
void protobuf_AssignDesc_package_2eproto();
void protobuf_ShutdownFile_package_2eproto();

class Package;

// ===================================================================

class Package : public ::google::protobuf::MessageLite {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }

  static const Package& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Package* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Package* other);

  // implements Message ----------------------------------------------

  Package* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IdField basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::IdField& basic() const;
  inline ::IdField* mutable_basic();
  inline ::IdField* release_basic();
  inline void set_allocated_basic(::IdField* basic);

  // optional .Details details = 2;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 2;
  inline const ::Details& details() const;
  inline ::Details* mutable_details();
  inline ::Details* release_details();
  inline void set_allocated_details(::Details* details);

  // optional string mount_type = 4;
  inline bool has_mount_type() const;
  inline void clear_mount_type();
  static const int kMountTypeFieldNumber = 4;
  inline const ::std::string& mount_type() const;
  inline void set_mount_type(const ::std::string& value);
  inline void set_mount_type(const char* value);
  inline void set_mount_type(const char* value, size_t size);
  inline ::std::string* mutable_mount_type();
  inline ::std::string* release_mount_type();
  inline void set_allocated_mount_type(::std::string* mount_type);

  // optional uint32 pin_number = 5;
  inline bool has_pin_number() const;
  inline void clear_pin_number();
  static const int kPinNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 pin_number() const;
  inline void set_pin_number(::google::protobuf::uint32 value);

  // optional bytes config = 6;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 6;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const void* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // @@protoc_insertion_point(class_scope:protbuf.Package)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();
  inline void set_has_details();
  inline void clear_has_details();
  inline void set_has_mount_type();
  inline void clear_has_mount_type();
  inline void set_has_pin_number();
  inline void clear_has_pin_number();
  inline void set_has_config();
  inline void clear_has_config();

  ::IdField* basic_;
  ::Details* details_;
  ::std::string* mount_type_;
  ::std::string* config_;
  ::google::protobuf::uint32 pin_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_package_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_package_2eproto();
  #endif
  friend void protobuf_AssignDesc_package_2eproto();
  friend void protobuf_ShutdownFile_package_2eproto();

  void InitAsDefaultInstance();
  static Package* default_instance_;
};
// ===================================================================


// ===================================================================

// Package

// required .IdField basic = 1;
inline bool Package::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Package::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Package::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Package::clear_basic() {
  if (basic_ != NULL) basic_->::IdField::Clear();
  clear_has_basic();
}
inline const ::IdField& Package::basic() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return basic_ != NULL ? *basic_ : *default_instance().basic_;
#else
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
#endif
}
inline ::IdField* Package::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::IdField;
  return basic_;
}
inline ::IdField* Package::release_basic() {
  clear_has_basic();
  ::IdField* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void Package::set_allocated_basic(::IdField* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
}

// optional .Details details = 2;
inline bool Package::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Package::set_has_details() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Package::clear_has_details() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Package::clear_details() {
  if (details_ != NULL) details_->::Details::Clear();
  clear_has_details();
}
inline const ::Details& Package::details() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return details_ != NULL ? *details_ : *default_instance().details_;
#else
  return details_ != NULL ? *details_ : *default_instance_->details_;
#endif
}
inline ::Details* Package::mutable_details() {
  set_has_details();
  if (details_ == NULL) details_ = new ::Details;
  return details_;
}
inline ::Details* Package::release_details() {
  clear_has_details();
  ::Details* temp = details_;
  details_ = NULL;
  return temp;
}
inline void Package::set_allocated_details(::Details* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
}

// optional string mount_type = 4;
inline bool Package::has_mount_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Package::set_has_mount_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Package::clear_has_mount_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Package::clear_mount_type() {
  if (mount_type_ != &::google::protobuf::internal::kEmptyString) {
    mount_type_->clear();
  }
  clear_has_mount_type();
}
inline const ::std::string& Package::mount_type() const {
  return *mount_type_;
}
inline void Package::set_mount_type(const ::std::string& value) {
  set_has_mount_type();
  if (mount_type_ == &::google::protobuf::internal::kEmptyString) {
    mount_type_ = new ::std::string;
  }
  mount_type_->assign(value);
}
inline void Package::set_mount_type(const char* value) {
  set_has_mount_type();
  if (mount_type_ == &::google::protobuf::internal::kEmptyString) {
    mount_type_ = new ::std::string;
  }
  mount_type_->assign(value);
}
inline void Package::set_mount_type(const char* value, size_t size) {
  set_has_mount_type();
  if (mount_type_ == &::google::protobuf::internal::kEmptyString) {
    mount_type_ = new ::std::string;
  }
  mount_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_mount_type() {
  set_has_mount_type();
  if (mount_type_ == &::google::protobuf::internal::kEmptyString) {
    mount_type_ = new ::std::string;
  }
  return mount_type_;
}
inline ::std::string* Package::release_mount_type() {
  clear_has_mount_type();
  if (mount_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mount_type_;
    mount_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Package::set_allocated_mount_type(::std::string* mount_type) {
  if (mount_type_ != &::google::protobuf::internal::kEmptyString) {
    delete mount_type_;
  }
  if (mount_type) {
    set_has_mount_type();
    mount_type_ = mount_type;
  } else {
    clear_has_mount_type();
    mount_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pin_number = 5;
inline bool Package::has_pin_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Package::set_has_pin_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Package::clear_has_pin_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Package::clear_pin_number() {
  pin_number_ = 0u;
  clear_has_pin_number();
}
inline ::google::protobuf::uint32 Package::pin_number() const {
  return pin_number_;
}
inline void Package::set_pin_number(::google::protobuf::uint32 value) {
  set_has_pin_number();
  pin_number_ = value;
}

// optional bytes config = 6;
inline bool Package::has_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Package::set_has_config() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Package::clear_has_config() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Package::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& Package::config() const {
  return *config_;
}
inline void Package::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void Package::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void Package::set_config(const void* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* Package::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Package::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_package_2eproto__INCLUDED
