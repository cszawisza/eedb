// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

void protobuf_ShutdownFile_item_2eproto() {
  delete ItemParameters::default_instance_;
  delete ItemBasicInfo::default_instance_;
  delete ItemDetails::default_instance_;
  delete ItemFullData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_item_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::user::protobuf_AddDesc_user_2eproto();
  ::protbuf::protobuf_AddDesc_group_2eproto();
  ::protbuf::protobuf_AddDesc_package_2eproto();
  ::protbuf::protobuf_AddDesc_parameters_2eproto();
  ::protobuf_AddDesc_common_2eproto();
  ItemParameters::default_instance_ = new ItemParameters();
  ItemBasicInfo::default_instance_ = new ItemBasicInfo();
  ItemDetails::default_instance_ = new ItemDetails();
  ItemFullData::default_instance_ = new ItemFullData();
  ItemParameters::default_instance_->InitAsDefaultInstance();
  ItemBasicInfo::default_instance_->InitAsDefaultInstance();
  ItemDetails::default_instance_->InitAsDefaultInstance();
  ItemFullData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_item_2eproto_once_);
void protobuf_AddDesc_item_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_item_2eproto_once_,
                 &protobuf_AddDesc_item_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_2eproto {
  StaticDescriptorInitializer_item_2eproto() {
    protobuf_AddDesc_item_2eproto();
  }
} static_descriptor_initializer_item_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ItemParameters::kIdFieldNumber;
const int ItemParameters::kValueFieldNumber;
#endif  // !_MSC_VER

ItemParameters::ItemParameters()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ItemParameters)
}

void ItemParameters::InitAsDefaultInstance() {
}

ItemParameters::ItemParameters(const ItemParameters& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ItemParameters)
}

void ItemParameters::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemParameters::~ItemParameters() {
  // @@protoc_insertion_point(destructor:protbuf.ItemParameters)
  SharedDtor();
}

void ItemParameters::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemParameters& ItemParameters::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_item_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
#endif
  return *default_instance_;
}

ItemParameters* ItemParameters::default_instance_ = NULL;

ItemParameters* ItemParameters::New() const {
  return new ItemParameters;
}

void ItemParameters::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ItemParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ItemParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ItemParameters)
  return false;
#undef DO_
}

void ItemParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ItemParameters)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ItemParameters)
}

int ItemParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemParameters::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemParameters*>(&from));
}

void ItemParameters::MergeFrom(const ItemParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemParameters::CopyFrom(const ItemParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemParameters::Swap(ItemParameters* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemParameters::GetTypeName() const {
  return "protbuf.ItemParameters";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemBasicInfo::kIdFieldNumber;
const int ItemBasicInfo::kNameFieldNumber;
const int ItemBasicInfo::kSymbolFieldNumber;
#endif  // !_MSC_VER

ItemBasicInfo::ItemBasicInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ItemBasicInfo)
}

void ItemBasicInfo::InitAsDefaultInstance() {
}

ItemBasicInfo::ItemBasicInfo(const ItemBasicInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ItemBasicInfo)
}

void ItemBasicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBasicInfo::~ItemBasicInfo() {
  // @@protoc_insertion_point(destructor:protbuf.ItemBasicInfo)
  SharedDtor();
}

void ItemBasicInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemBasicInfo& ItemBasicInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_item_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
#endif
  return *default_instance_;
}

ItemBasicInfo* ItemBasicInfo::default_instance_ = NULL;

ItemBasicInfo* ItemBasicInfo::New() const {
  return new ItemBasicInfo;
}

void ItemBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ItemBasicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_symbol;
        break;
      }

      // optional string symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ItemBasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ItemBasicInfo)
  return false;
#undef DO_
}

void ItemBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ItemBasicInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ItemBasicInfo)
}

int ItemBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBasicInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemBasicInfo*>(&from));
}

void ItemBasicInfo::MergeFrom(const ItemBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemBasicInfo::CopyFrom(const ItemBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemBasicInfo::Swap(ItemBasicInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemBasicInfo::GetTypeName() const {
  return "protbuf.ItemBasicInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDetails::kDescriptionFieldNumber;
const int ItemDetails::kNameSpaceFieldNumber;
const int ItemDetails::kPrivateItemFieldNumber;
const int ItemDetails::kPackageIdFieldNumber;
const int ItemDetails::kUserIdFieldNumber;
const int ItemDetails::kGroupIdFieldNumber;
const int ItemDetails::kParametersFieldNumber;
#endif  // !_MSC_VER

ItemDetails::ItemDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ItemDetails)
}

void ItemDetails::InitAsDefaultInstance() {
}

ItemDetails::ItemDetails(const ItemDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ItemDetails)
}

void ItemDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_item_ = false;
  package_id_ = 0u;
  user_id_ = 0u;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDetails::~ItemDetails() {
  // @@protoc_insertion_point(destructor:protbuf.ItemDetails)
  SharedDtor();
}

void ItemDetails::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_space_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemDetails& ItemDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_item_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
#endif
  return *default_instance_;
}

ItemDetails* ItemDetails::default_instance_ = NULL;

ItemDetails* ItemDetails::New() const {
  return new ItemDetails;
}

void ItemDetails::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemDetails*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(private_item_, group_id_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_name_space()) {
      if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_space_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ItemDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name_space;
        break;
      }

      // required string name_space = 5;
      case 5: {
        if (tag == 42) {
         parse_name_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_space()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_private_item;
        break;
      }

      // required bool private_item = 6;
      case 6: {
        if (tag == 48) {
         parse_private_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private_item_)));
          set_has_private_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_parameters;
        break;
      }

      // repeated .protbuf.ItemParameters parameters = 7;
      case 7: {
        if (tag == 58) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_parameters;
        if (input->ExpectTag(64)) goto parse_package_id;
        break;
      }

      // optional uint32 package_id = 8;
      case 8: {
        if (tag == 64) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 9;
      case 9: {
        if (tag == 72) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 10;
      case 10: {
        if (tag == 80) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ItemDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ItemDetails)
  return false;
#undef DO_
}

void ItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ItemDetails)
  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // required string name_space = 5;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name_space(), output);
  }

  // required bool private_item = 6;
  if (has_private_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->private_item(), output);
  }

  // repeated .protbuf.ItemParameters parameters = 7;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->parameters(i), output);
  }

  // optional uint32 package_id = 8;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->package_id(), output);
  }

  // optional uint32 user_id = 9;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->user_id(), output);
  }

  // optional uint32 group_id = 10;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->group_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ItemDetails)
}

int ItemDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string name_space = 5;
    if (has_name_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_space());
    }

    // required bool private_item = 6;
    if (has_private_item()) {
      total_size += 1 + 1;
    }

    // optional uint32 package_id = 8;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 user_id = 9;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 group_id = 10;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  // repeated .protbuf.ItemParameters parameters = 7;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemDetails*>(&from));
}

void ItemDetails::MergeFrom(const ItemDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_name_space()) {
      set_name_space(from.name_space());
    }
    if (from.has_private_item()) {
      set_private_item(from.private_item());
    }
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemDetails::CopyFrom(const ItemDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->parameters())) return false;
  return true;
}

void ItemDetails::Swap(ItemDetails* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(name_space_, other->name_space_);
    std::swap(private_item_, other->private_item_);
    std::swap(package_id_, other->package_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(group_id_, other->group_id_);
    parameters_.Swap(&other->parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemDetails::GetTypeName() const {
  return "protbuf.ItemDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemFullData::kBasicFieldNumber;
const int ItemFullData::kDetailsFieldNumber;
#endif  // !_MSC_VER

ItemFullData::ItemFullData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protbuf.ItemFullData)
}

void ItemFullData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::protbuf::ItemBasicInfo*>(
      ::protbuf::ItemBasicInfo::internal_default_instance());
#else
  basic_ = const_cast< ::protbuf::ItemBasicInfo*>(&::protbuf::ItemBasicInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  details_ = const_cast< ::protbuf::ItemDetails*>(
      ::protbuf::ItemDetails::internal_default_instance());
#else
  details_ = const_cast< ::protbuf::ItemDetails*>(&::protbuf::ItemDetails::default_instance());
#endif
}

ItemFullData::ItemFullData(const ItemFullData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protbuf.ItemFullData)
}

void ItemFullData::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemFullData::~ItemFullData() {
  // @@protoc_insertion_point(destructor:protbuf.ItemFullData)
  SharedDtor();
}

void ItemFullData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
    delete details_;
  }
}

void ItemFullData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemFullData& ItemFullData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_item_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
#endif
  return *default_instance_;
}

ItemFullData* ItemFullData::default_instance_ = NULL;

ItemFullData* ItemFullData::New() const {
  return new ItemFullData;
}

void ItemFullData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::protbuf::ItemBasicInfo::Clear();
    }
    if (has_details()) {
      if (details_ != NULL) details_->::protbuf::ItemDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ItemFullData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protbuf.ItemFullData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protbuf.ItemBasicInfo basic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // required .protbuf.ItemDetails details = 2;
      case 2: {
        if (tag == 18) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protbuf.ItemFullData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protbuf.ItemFullData)
  return false;
#undef DO_
}

void ItemFullData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protbuf.ItemFullData)
  // required .protbuf.ItemBasicInfo basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // required .protbuf.ItemDetails details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->details(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protbuf.ItemFullData)
}

int ItemFullData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protbuf.ItemBasicInfo basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // required .protbuf.ItemDetails details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemFullData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemFullData*>(&from));
}

void ItemFullData::MergeFrom(const ItemFullData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::protbuf::ItemBasicInfo::MergeFrom(from.basic());
    }
    if (from.has_details()) {
      mutable_details()->::protbuf::ItemDetails::MergeFrom(from.details());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ItemFullData::CopyFrom(const ItemFullData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemFullData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void ItemFullData::Swap(ItemFullData* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemFullData::GetTypeName() const {
  return "protbuf.ItemFullData";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)
