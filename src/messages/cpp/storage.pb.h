// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef PROTOBUF_storage_2eproto__INCLUDED
#define PROTOBUF_storage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_storage_2eproto();
void protobuf_AssignDesc_storage_2eproto();
void protobuf_ShutdownFile_storage_2eproto();

class StorageStatistics;
class Storage;

// ===================================================================

class StorageStatistics : public ::google::protobuf::MessageLite {
 public:
  StorageStatistics();
  virtual ~StorageStatistics();

  StorageStatistics(const StorageStatistics& from);

  inline StorageStatistics& operator=(const StorageStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const StorageStatistics& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StorageStatistics* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StorageStatistics* other);

  // implements Message ----------------------------------------------

  StorageStatistics* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StorageStatistics& from);
  void MergeFrom(const StorageStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protbuf.StorageStatistics)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static StorageStatistics* default_instance_;
};
// -------------------------------------------------------------------

class Storage : public ::google::protobuf::MessageLite {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Storage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Storage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Storage* other);

  // implements Message ----------------------------------------------

  Storage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional fixed64 creationDate = 4;
  inline bool has_creationdate() const;
  inline void clear_creationdate();
  static const int kCreationDateFieldNumber = 4;
  inline ::google::protobuf::uint64 creationdate() const;
  inline void set_creationdate(::google::protobuf::uint64 value);

  // optional fixed64 lastupdate = 5;
  inline bool has_lastupdate() const;
  inline void clear_lastupdate();
  static const int kLastupdateFieldNumber = 5;
  inline ::google::protobuf::uint64 lastupdate() const;
  inline void set_lastupdate(::google::protobuf::uint64 value);

  // optional uint32 owner_id = 6;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 6;
  inline ::google::protobuf::uint32 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protbuf.Storage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_creationdate();
  inline void clear_has_creationdate();
  inline void set_has_lastupdate();
  inline void clear_has_lastupdate();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 owner_id_;
  ::google::protobuf::uint64 creationdate_;
  ::google::protobuf::uint64 lastupdate_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static Storage* default_instance_;
};
// ===================================================================


// ===================================================================

// StorageStatistics

// -------------------------------------------------------------------

// Storage

// required uint32 id = 1;
inline bool Storage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Storage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Storage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Storage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Storage::id() const {
  // @@protoc_insertion_point(field_get:protbuf.Storage.id)
  return id_;
}
inline void Storage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.Storage.id)
}

// optional string name = 2;
inline bool Storage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Storage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Storage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Storage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Storage::name() const {
  // @@protoc_insertion_point(field_get:protbuf.Storage.name)
  return *name_;
}
inline void Storage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.Storage.name)
}
inline void Storage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.Storage.name)
}
inline void Storage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.Storage.name)
}
inline ::std::string* Storage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.Storage.name)
  return name_;
}
inline ::std::string* Storage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Storage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Storage.name)
}

// optional string description = 3;
inline bool Storage::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Storage::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Storage::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Storage::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Storage::description() const {
  // @@protoc_insertion_point(field_get:protbuf.Storage.description)
  return *description_;
}
inline void Storage::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:protbuf.Storage.description)
}
inline void Storage::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:protbuf.Storage.description)
}
inline void Storage::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protbuf.Storage.description)
}
inline ::std::string* Storage::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protbuf.Storage.description)
  return description_;
}
inline ::std::string* Storage::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Storage::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protbuf.Storage.description)
}

// optional fixed64 creationDate = 4;
inline bool Storage::has_creationdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Storage::set_has_creationdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Storage::clear_has_creationdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Storage::clear_creationdate() {
  creationdate_ = GOOGLE_ULONGLONG(0);
  clear_has_creationdate();
}
inline ::google::protobuf::uint64 Storage::creationdate() const {
  // @@protoc_insertion_point(field_get:protbuf.Storage.creationDate)
  return creationdate_;
}
inline void Storage::set_creationdate(::google::protobuf::uint64 value) {
  set_has_creationdate();
  creationdate_ = value;
  // @@protoc_insertion_point(field_set:protbuf.Storage.creationDate)
}

// optional fixed64 lastupdate = 5;
inline bool Storage::has_lastupdate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Storage::set_has_lastupdate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Storage::clear_has_lastupdate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Storage::clear_lastupdate() {
  lastupdate_ = GOOGLE_ULONGLONG(0);
  clear_has_lastupdate();
}
inline ::google::protobuf::uint64 Storage::lastupdate() const {
  // @@protoc_insertion_point(field_get:protbuf.Storage.lastupdate)
  return lastupdate_;
}
inline void Storage::set_lastupdate(::google::protobuf::uint64 value) {
  set_has_lastupdate();
  lastupdate_ = value;
  // @@protoc_insertion_point(field_set:protbuf.Storage.lastupdate)
}

// optional uint32 owner_id = 6;
inline bool Storage::has_owner_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Storage::set_has_owner_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Storage::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Storage::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
inline ::google::protobuf::uint32 Storage::owner_id() const {
  // @@protoc_insertion_point(field_get:protbuf.Storage.owner_id)
  return owner_id_;
}
inline void Storage::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:protbuf.Storage.owner_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2eproto__INCLUDED
