// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "package.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

void protobuf_ShutdownFile_package_2eproto() {
  delete Package::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_package_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_package_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_common_2eproto();
  Package::default_instance_ = new Package();
  Package::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_package_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_package_2eproto_once_);
void protobuf_AddDesc_package_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_package_2eproto_once_,
                 &protobuf_AddDesc_package_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_package_2eproto {
  StaticDescriptorInitializer_package_2eproto() {
    protobuf_AddDesc_package_2eproto();
  }
} static_descriptor_initializer_package_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Package::kBasicFieldNumber;
const int Package::kDetailsFieldNumber;
const int Package::kMountTypeFieldNumber;
const int Package::kPinNumberFieldNumber;
const int Package::kConfigFieldNumber;
#endif  // !_MSC_VER

Package::Package()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Package::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_ = const_cast< ::IdField*>(
      ::IdField::internal_default_instance());
#else
  basic_ = const_cast< ::IdField*>(&::IdField::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  details_ = const_cast< ::Details*>(
      ::Details::internal_default_instance());
#else
  details_ = const_cast< ::Details*>(&::Details::default_instance());
#endif
}

Package::Package(const Package& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Package::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  details_ = NULL;
  mount_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_number_ = 0u;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Package::~Package() {
  SharedDtor();
}

void Package::SharedDtor() {
  if (mount_type_ != &::google::protobuf::internal::kEmptyString) {
    delete mount_type_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_;
    delete details_;
  }
}

void Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Package& Package::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_package_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_package_2eproto();
#endif
  return *default_instance_;
}

Package* Package::default_instance_ = NULL;

Package* Package::New() const {
  return new Package;
}

void Package::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::IdField::Clear();
    }
    if (has_details()) {
      if (details_ != NULL) details_->::Details::Clear();
    }
    if (has_mount_type()) {
      if (mount_type_ != &::google::protobuf::internal::kEmptyString) {
        mount_type_->clear();
      }
    }
    pin_number_ = 0u;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IdField basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }

      // optional .Details details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mount_type;
        break;
      }

      // optional string mount_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pin_number;
        break;
      }

      // optional uint32 pin_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pin_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_number_)));
          set_has_pin_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_config;
        break;
      }

      // optional bytes config = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .IdField basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->basic(), output);
  }

  // optional .Details details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->details(), output);
  }

  // optional string mount_type = 4;
  if (has_mount_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mount_type(), output);
  }

  // optional uint32 pin_number = 5;
  if (has_pin_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pin_number(), output);
  }

  // optional bytes config = 6;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->config(), output);
  }

}

int Package::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IdField basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional .Details details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

    // optional string mount_type = 4;
    if (has_mount_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mount_type());
    }

    // optional uint32 pin_number = 5;
    if (has_pin_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pin_number());
    }

    // optional bytes config = 6;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Package::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Package*>(&from));
}

void Package::MergeFrom(const Package& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::IdField::MergeFrom(from.basic());
    }
    if (from.has_details()) {
      mutable_details()->::Details::MergeFrom(from.details());
    }
    if (from.has_mount_type()) {
      set_mount_type(from.mount_type());
    }
    if (from.has_pin_number()) {
      set_pin_number(from.pin_number());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
}

void Package::CopyFrom(const Package& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void Package::Swap(Package* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(details_, other->details_);
    std::swap(mount_type_, other->mount_type_);
    std::swap(pin_number_, other->pin_number_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Package::GetTypeName() const {
  return "protbuf.Package";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)
