// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace user {

void protobuf_ShutdownFile_user_2eproto() {
  delete MsgUserRequest::default_instance_;
  delete MsgUserRequest_Credentials::default_instance_;
  delete MsgUserRequest_Login::default_instance_;
  delete MsgUserRequest_Logout::default_instance_;
  delete MsgUserRequest_Add::default_instance_;
  delete MsgUserRequest_Remove::default_instance_;
  delete MsgUserRequest_Modify::default_instance_;
  delete MsgUserRequest_Get::default_instance_;
  delete MsgUserResponse::default_instance_;
  delete UserDetails::default_instance_;
  delete UserConfig::default_instance_;
  delete UserStatis::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_user_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protbuf::protobuf_AddDesc_storage_2eproto();
  ::protbuf::protobuf_AddDesc_stats_2eproto();
  ::protobuf_AddDesc_common_2eproto();
  MsgUserRequest::default_instance_ = new MsgUserRequest();
  MsgUserRequest_Credentials::default_instance_ = new MsgUserRequest_Credentials();
  MsgUserRequest_Login::default_instance_ = new MsgUserRequest_Login();
  MsgUserRequest_Logout::default_instance_ = new MsgUserRequest_Logout();
  MsgUserRequest_Add::default_instance_ = new MsgUserRequest_Add();
  MsgUserRequest_Remove::default_instance_ = new MsgUserRequest_Remove();
  MsgUserRequest_Modify::default_instance_ = new MsgUserRequest_Modify();
  MsgUserRequest_Get::default_instance_ = new MsgUserRequest_Get();
  MsgUserResponse::default_instance_ = new MsgUserResponse();
  UserDetails::default_instance_ = new UserDetails();
  UserConfig::default_instance_ = new UserConfig();
  UserStatis::default_instance_ = new UserStatis();
  MsgUserRequest::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Credentials::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Login::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Logout::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Add::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Remove::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Modify::default_instance_->InitAsDefaultInstance();
  MsgUserRequest_Get::default_instance_->InitAsDefaultInstance();
  MsgUserResponse::default_instance_->InitAsDefaultInstance();
  UserDetails::default_instance_->InitAsDefaultInstance();
  UserConfig::default_instance_->InitAsDefaultInstance();
  UserStatis::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_user_2eproto_once_);
void protobuf_AddDesc_user_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_user_2eproto_once_,
                 &protobuf_AddDesc_user_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;
#endif
bool Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool Replay_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 12:
    case 13:
    case 14:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserRequest_Credentials::kIdFieldNumber;
const int MsgUserRequest_Credentials::kNameFieldNumber;
const int MsgUserRequest_Credentials::kEmailFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest_Credentials::MsgUserRequest_Credentials()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Credentials)
}

void MsgUserRequest_Credentials::InitAsDefaultInstance() {
}

MsgUserRequest_Credentials::MsgUserRequest_Credentials(const MsgUserRequest_Credentials& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Credentials)
}

void MsgUserRequest_Credentials::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_login_id();
}

MsgUserRequest_Credentials::~MsgUserRequest_Credentials() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Credentials)
  SharedDtor();
}

void MsgUserRequest_Credentials::SharedDtor() {
  if (has_login_id()) {
    clear_login_id();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgUserRequest_Credentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Credentials& MsgUserRequest_Credentials::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Credentials* MsgUserRequest_Credentials::default_instance_ = NULL;

MsgUserRequest_Credentials* MsgUserRequest_Credentials::New() const {
  return new MsgUserRequest_Credentials;
}

void MsgUserRequest_Credentials::clear_login_id() {
  switch(login_id_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kName: {
      delete login_id_.name_;
      break;
    }
    case kEmail: {
      delete login_id_.email_;
      break;
    }
    case LOGIN_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOGIN_ID_NOT_SET;
}


void MsgUserRequest_Credentials::Clear() {
  clear_login_id();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Credentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Credentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          clear_login_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_id_.id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Credentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Credentials)
  return false;
#undef DO_
}

void MsgUserRequest_Credentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Credentials)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Credentials)
}

int MsgUserRequest_Credentials::ByteSize() const {
  int total_size = 0;

  switch (login_id_case()) {
    // optional uint32 id = 1;
    case kId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
      break;
    }
    // optional string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // optional string email = 3;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
      break;
    }
    case LOGIN_ID_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Credentials::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Credentials*>(&from));
}

void MsgUserRequest_Credentials::MergeFrom(const MsgUserRequest_Credentials& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.login_id_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case kEmail: {
      set_email(from.email());
      break;
    }
    case LOGIN_ID_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Credentials::CopyFrom(const MsgUserRequest_Credentials& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Credentials::IsInitialized() const {

  return true;
}

void MsgUserRequest_Credentials::Swap(MsgUserRequest_Credentials* other) {
  if (other != this) {
    std::swap(login_id_, other->login_id_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Credentials::GetTypeName() const {
  return "user.MsgUserRequest.Credentials";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserRequest_Login::kCredFieldNumber;
const int MsgUserRequest_Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest_Login::MsgUserRequest_Login()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Login)
}

void MsgUserRequest_Login::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cred_ = const_cast< ::user::MsgUserRequest_Credentials*>(
      ::user::MsgUserRequest_Credentials::internal_default_instance());
#else
  cred_ = const_cast< ::user::MsgUserRequest_Credentials*>(&::user::MsgUserRequest_Credentials::default_instance());
#endif
}

MsgUserRequest_Login::MsgUserRequest_Login(const MsgUserRequest_Login& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Login)
}

void MsgUserRequest_Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cred_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserRequest_Login::~MsgUserRequest_Login() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Login)
  SharedDtor();
}

void MsgUserRequest_Login::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cred_;
  }
}

void MsgUserRequest_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Login& MsgUserRequest_Login::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Login* MsgUserRequest_Login::default_instance_ = NULL;

MsgUserRequest_Login* MsgUserRequest_Login::New() const {
  return new MsgUserRequest_Login;
}

void MsgUserRequest_Login::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cred()) {
      if (cred_ != NULL) cred_->::user::MsgUserRequest_Credentials::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user.MsgUserRequest.Credentials cred = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cred()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Login)
  return false;
#undef DO_
}

void MsgUserRequest_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Login)
  // required .user.MsgUserRequest.Credentials cred = 1;
  if (has_cred()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cred(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Login)
}

int MsgUserRequest_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user.MsgUserRequest.Credentials cred = 1;
    if (has_cred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cred());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Login::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Login*>(&from));
}

void MsgUserRequest_Login::MergeFrom(const MsgUserRequest_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cred()) {
      mutable_cred()->::user::MsgUserRequest_Credentials::MergeFrom(from.cred());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Login::CopyFrom(const MsgUserRequest_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgUserRequest_Login::Swap(MsgUserRequest_Login* other) {
  if (other != this) {
    std::swap(cred_, other->cred_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Login::GetTypeName() const {
  return "user.MsgUserRequest.Login";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgUserRequest_Logout::MsgUserRequest_Logout()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Logout)
}

void MsgUserRequest_Logout::InitAsDefaultInstance() {
}

MsgUserRequest_Logout::MsgUserRequest_Logout(const MsgUserRequest_Logout& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Logout)
}

void MsgUserRequest_Logout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserRequest_Logout::~MsgUserRequest_Logout() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Logout)
  SharedDtor();
}

void MsgUserRequest_Logout::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgUserRequest_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Logout& MsgUserRequest_Logout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Logout* MsgUserRequest_Logout::default_instance_ = NULL;

MsgUserRequest_Logout* MsgUserRequest_Logout::New() const {
  return new MsgUserRequest_Logout;
}

void MsgUserRequest_Logout::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Logout)
  return false;
#undef DO_
}

void MsgUserRequest_Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Logout)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Logout)
}

int MsgUserRequest_Logout::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Logout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Logout*>(&from));
}

void MsgUserRequest_Logout::MergeFrom(const MsgUserRequest_Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Logout::CopyFrom(const MsgUserRequest_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Logout::IsInitialized() const {

  return true;
}

void MsgUserRequest_Logout::Swap(MsgUserRequest_Logout* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Logout::GetTypeName() const {
  return "user.MsgUserRequest.Logout";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserRequest_Add::kDetailsFieldNumber;
const int MsgUserRequest_Add::kConfigFieldNumber;
const int MsgUserRequest_Add::kPasswordFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest_Add::MsgUserRequest_Add()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Add)
}

void MsgUserRequest_Add::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  details_ = const_cast< ::user::UserDetails*>(
      ::user::UserDetails::internal_default_instance());
#else
  details_ = const_cast< ::user::UserDetails*>(&::user::UserDetails::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  config_ = const_cast< ::user::UserConfig*>(
      ::user::UserConfig::internal_default_instance());
#else
  config_ = const_cast< ::user::UserConfig*>(&::user::UserConfig::default_instance());
#endif
}

MsgUserRequest_Add::MsgUserRequest_Add(const MsgUserRequest_Add& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Add)
}

void MsgUserRequest_Add::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  details_ = NULL;
  config_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserRequest_Add::~MsgUserRequest_Add() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Add)
  SharedDtor();
}

void MsgUserRequest_Add::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete details_;
    delete config_;
  }
}

void MsgUserRequest_Add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Add& MsgUserRequest_Add::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Add* MsgUserRequest_Add::default_instance_ = NULL;

MsgUserRequest_Add* MsgUserRequest_Add::New() const {
  return new MsgUserRequest_Add;
}

void MsgUserRequest_Add::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_details()) {
      if (details_ != NULL) details_->::user::UserDetails::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::user::UserConfig::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Add)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user.UserDetails details = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional .user.UserConfig config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Add)
  return false;
#undef DO_
}

void MsgUserRequest_Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Add)
  // required .user.UserDetails details = 1;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->details(), output);
  }

  // optional .user.UserConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->config(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Add)
}

int MsgUserRequest_Add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user.UserDetails details = 1;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }

    // optional .user.UserConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Add::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Add*>(&from));
}

void MsgUserRequest_Add::MergeFrom(const MsgUserRequest_Add& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::user::UserDetails::MergeFrom(from.details());
    }
    if (from.has_config()) {
      mutable_config()->::user::UserConfig::MergeFrom(from.config());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Add::CopyFrom(const MsgUserRequest_Add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Add::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void MsgUserRequest_Add::Swap(MsgUserRequest_Add* other) {
  if (other != this) {
    std::swap(details_, other->details_);
    std::swap(config_, other->config_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Add::GetTypeName() const {
  return "user.MsgUserRequest.Add";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserRequest_Remove::kCredFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest_Remove::MsgUserRequest_Remove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Remove)
}

void MsgUserRequest_Remove::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cred_ = const_cast< ::user::MsgUserRequest_Credentials*>(
      ::user::MsgUserRequest_Credentials::internal_default_instance());
#else
  cred_ = const_cast< ::user::MsgUserRequest_Credentials*>(&::user::MsgUserRequest_Credentials::default_instance());
#endif
}

MsgUserRequest_Remove::MsgUserRequest_Remove(const MsgUserRequest_Remove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Remove)
}

void MsgUserRequest_Remove::SharedCtor() {
  _cached_size_ = 0;
  cred_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserRequest_Remove::~MsgUserRequest_Remove() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Remove)
  SharedDtor();
}

void MsgUserRequest_Remove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cred_;
  }
}

void MsgUserRequest_Remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Remove& MsgUserRequest_Remove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Remove* MsgUserRequest_Remove::default_instance_ = NULL;

MsgUserRequest_Remove* MsgUserRequest_Remove::New() const {
  return new MsgUserRequest_Remove;
}

void MsgUserRequest_Remove::Clear() {
  if (has_cred()) {
    if (cred_ != NULL) cred_->::user::MsgUserRequest_Credentials::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Remove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user.MsgUserRequest.Credentials cred = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cred()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Remove)
  return false;
#undef DO_
}

void MsgUserRequest_Remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Remove)
  // required .user.MsgUserRequest.Credentials cred = 1;
  if (has_cred()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cred(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Remove)
}

int MsgUserRequest_Remove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user.MsgUserRequest.Credentials cred = 1;
    if (has_cred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cred());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Remove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Remove*>(&from));
}

void MsgUserRequest_Remove::MergeFrom(const MsgUserRequest_Remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cred()) {
      mutable_cred()->::user::MsgUserRequest_Credentials::MergeFrom(from.cred());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Remove::CopyFrom(const MsgUserRequest_Remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Remove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgUserRequest_Remove::Swap(MsgUserRequest_Remove* other) {
  if (other != this) {
    std::swap(cred_, other->cred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Remove::GetTypeName() const {
  return "user.MsgUserRequest.Remove";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserRequest_Modify::kEmailFieldNumber;
const int MsgUserRequest_Modify::kNameFieldNumber;
const int MsgUserRequest_Modify::kAddressFieldNumber;
const int MsgUserRequest_Modify::kPhoneNumberFieldNumber;
const int MsgUserRequest_Modify::kDescriptionFieldNumber;
const int MsgUserRequest_Modify::kAvatarFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest_Modify::MsgUserRequest_Modify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Modify)
}

void MsgUserRequest_Modify::InitAsDefaultInstance() {
}

MsgUserRequest_Modify::MsgUserRequest_Modify(const MsgUserRequest_Modify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Modify)
}

void MsgUserRequest_Modify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserRequest_Modify::~MsgUserRequest_Modify() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Modify)
  SharedDtor();
}

void MsgUserRequest_Modify::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (phone_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_number_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgUserRequest_Modify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Modify& MsgUserRequest_Modify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Modify* MsgUserRequest_Modify::default_instance_ = NULL;

MsgUserRequest_Modify* MsgUserRequest_Modify::New() const {
  return new MsgUserRequest_Modify;
}

void MsgUserRequest_Modify::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_number_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Modify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Modify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        break;
      }

      // optional bytes phone_number = 4;
      case 4: {
        if (tag == 34) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional bytes description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Modify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Modify)
  return false;
#undef DO_
}

void MsgUserRequest_Modify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Modify)
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // optional bytes phone_number = 4;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->phone_number(), output);
  }

  // optional bytes description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->description(), output);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->avatar(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Modify)
}

int MsgUserRequest_Modify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional bytes phone_number = 4;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_number());
    }

    // optional bytes description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // optional bytes avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Modify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Modify*>(&from));
}

void MsgUserRequest_Modify::MergeFrom(const MsgUserRequest_Modify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Modify::CopyFrom(const MsgUserRequest_Modify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Modify::IsInitialized() const {

  return true;
}

void MsgUserRequest_Modify::Swap(MsgUserRequest_Modify* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(description_, other->description_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Modify::GetTypeName() const {
  return "user.MsgUserRequest.Modify";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserRequest_Get::kBasicDataFieldNumber;
const int MsgUserRequest_Get::kConfigFieldNumber;
const int MsgUserRequest_Get::kStatsFieldNumber;
const int MsgUserRequest_Get::kPermissionsFieldNumber;
const int MsgUserRequest_Get::kDetailsFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest_Get::MsgUserRequest_Get()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest.Get)
}

void MsgUserRequest_Get::InitAsDefaultInstance() {
}

MsgUserRequest_Get::MsgUserRequest_Get(const MsgUserRequest_Get& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest.Get)
}

void MsgUserRequest_Get::SharedCtor() {
  _cached_size_ = 0;
  basic_data_ = false;
  config_ = false;
  stats_ = false;
  permissions_ = false;
  details_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserRequest_Get::~MsgUserRequest_Get() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest.Get)
  SharedDtor();
}

void MsgUserRequest_Get::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgUserRequest_Get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest_Get& MsgUserRequest_Get::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest_Get* MsgUserRequest_Get::default_instance_ = NULL;

MsgUserRequest_Get* MsgUserRequest_Get::New() const {
  return new MsgUserRequest_Get;
}

void MsgUserRequest_Get::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgUserRequest_Get*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(basic_data_, details_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest_Get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest.Get)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool basic_data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_data_)));
          set_has_basic_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_config;
        break;
      }

      // optional bool config = 2;
      case 2: {
        if (tag == 16) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stats;
        break;
      }

      // optional bool stats = 3;
      case 3: {
        if (tag == 24) {
         parse_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stats_)));
          set_has_stats();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_permissions;
        break;
      }

      // optional bool permissions = 4;
      case 4: {
        if (tag == 32) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_details;
        break;
      }

      // optional bool details = 5;
      case 5: {
        if (tag == 40) {
         parse_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &details_)));
          set_has_details();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest.Get)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest.Get)
  return false;
#undef DO_
}

void MsgUserRequest_Get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest.Get)
  // optional bool basic_data = 1;
  if (has_basic_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->basic_data(), output);
  }

  // optional bool config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->config(), output);
  }

  // optional bool stats = 3;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->stats(), output);
  }

  // optional bool permissions = 4;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->permissions(), output);
  }

  // optional bool details = 5;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->details(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest.Get)
}

int MsgUserRequest_Get::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool basic_data = 1;
    if (has_basic_data()) {
      total_size += 1 + 1;
    }

    // optional bool config = 2;
    if (has_config()) {
      total_size += 1 + 1;
    }

    // optional bool stats = 3;
    if (has_stats()) {
      total_size += 1 + 1;
    }

    // optional bool permissions = 4;
    if (has_permissions()) {
      total_size += 1 + 1;
    }

    // optional bool details = 5;
    if (has_details()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest_Get::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest_Get*>(&from));
}

void MsgUserRequest_Get::MergeFrom(const MsgUserRequest_Get& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic_data()) {
      set_basic_data(from.basic_data());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_stats()) {
      set_stats(from.stats());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest_Get::CopyFrom(const MsgUserRequest_Get& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest_Get::IsInitialized() const {

  return true;
}

void MsgUserRequest_Get::Swap(MsgUserRequest_Get* other) {
  if (other != this) {
    std::swap(basic_data_, other->basic_data_);
    std::swap(config_, other->config_);
    std::swap(stats_, other->stats_);
    std::swap(permissions_, other->permissions_);
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest_Get::GetTypeName() const {
  return "user.MsgUserRequest.Get";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgUserRequest::kActionFieldNumber;
const int MsgUserRequest::kAddFieldNumber;
const int MsgUserRequest::kLoginFieldNumber;
const int MsgUserRequest::kLogoutFieldNumber;
const int MsgUserRequest::kRemoveFieldNumber;
const int MsgUserRequest::kModifyFieldNumber;
const int MsgUserRequest::kGetFieldNumber;
#endif  // !_MSC_VER

MsgUserRequest::MsgUserRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserRequest)
}

void MsgUserRequest::InitAsDefaultInstance() {
}

MsgUserRequest::MsgUserRequest(const MsgUserRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserRequest)
}

void MsgUserRequest::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_data();
}

MsgUserRequest::~MsgUserRequest() {
  // @@protoc_insertion_point(destructor:user.MsgUserRequest)
  SharedDtor();
}

void MsgUserRequest::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MsgUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserRequest& MsgUserRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserRequest* MsgUserRequest::default_instance_ = NULL;

MsgUserRequest* MsgUserRequest::New() const {
  return new MsgUserRequest;
}

void MsgUserRequest::clear_data() {
  switch(data_case()) {
    case kAdd: {
      delete data_.add_;
      break;
    }
    case kLogin: {
      delete data_.login_;
      break;
    }
    case kLogout: {
      delete data_.logout_;
      break;
    }
    case kRemove: {
      delete data_.remove_;
      break;
    }
    case kModify: {
      delete data_.modify_;
      break;
    }
    case kGet: {
      delete data_.get_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void MsgUserRequest::Clear() {
  action_ = 1;
  clear_data();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .user.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user::Action_IsValid(value)) {
            set_action(static_cast< ::user::Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_add;
        break;
      }

      // optional .user.MsgUserRequest.Add add = 2;
      case 2: {
        if (tag == 18) {
         parse_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_login;
        break;
      }

      // optional .user.MsgUserRequest.Login login = 3;
      case 3: {
        if (tag == 26) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logout;
        break;
      }

      // optional .user.MsgUserRequest.Logout logout = 4;
      case 4: {
        if (tag == 34) {
         parse_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remove;
        break;
      }

      // optional .user.MsgUserRequest.Remove remove = 5;
      case 5: {
        if (tag == 42) {
         parse_remove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_modify;
        break;
      }

      // optional .user.MsgUserRequest.Modify modify = 6;
      case 6: {
        if (tag == 50) {
         parse_modify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_get;
        break;
      }

      // optional .user.MsgUserRequest.Get get = 7;
      case 7: {
        if (tag == 58) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserRequest)
  return false;
#undef DO_
}

void MsgUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserRequest)
  // optional .user.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .user.MsgUserRequest.Add add = 2;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->add(), output);
  }

  // optional .user.MsgUserRequest.Login login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->login(), output);
  }

  // optional .user.MsgUserRequest.Logout logout = 4;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->logout(), output);
  }

  // optional .user.MsgUserRequest.Remove remove = 5;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->remove(), output);
  }

  // optional .user.MsgUserRequest.Modify modify = 6;
  if (has_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->modify(), output);
  }

  // optional .user.MsgUserRequest.Get get = 7;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->get(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserRequest)
}

int MsgUserRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .user.Action action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  switch (data_case()) {
    // optional .user.MsgUserRequest.Add add = 2;
    case kAdd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add());
      break;
    }
    // optional .user.MsgUserRequest.Login login = 3;
    case kLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
      break;
    }
    // optional .user.MsgUserRequest.Logout logout = 4;
    case kLogout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout());
      break;
    }
    // optional .user.MsgUserRequest.Remove remove = 5;
    case kRemove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove());
      break;
    }
    // optional .user.MsgUserRequest.Modify modify = 6;
    case kModify: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify());
      break;
    }
    // optional .user.MsgUserRequest.Get get = 7;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserRequest*>(&from));
}

void MsgUserRequest::MergeFrom(const MsgUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.data_case()) {
    case kAdd: {
      mutable_add()->::user::MsgUserRequest_Add::MergeFrom(from.add());
      break;
    }
    case kLogin: {
      mutable_login()->::user::MsgUserRequest_Login::MergeFrom(from.login());
      break;
    }
    case kLogout: {
      mutable_logout()->::user::MsgUserRequest_Logout::MergeFrom(from.logout());
      break;
    }
    case kRemove: {
      mutable_remove()->::user::MsgUserRequest_Remove::MergeFrom(from.remove());
      break;
    }
    case kModify: {
      mutable_modify()->::user::MsgUserRequest_Modify::MergeFrom(from.modify());
      break;
    }
    case kGet: {
      mutable_get()->::user::MsgUserRequest_Get::MergeFrom(from.get());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserRequest::CopyFrom(const MsgUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserRequest::IsInitialized() const {

  if (has_add()) {
    if (!this->add().IsInitialized()) return false;
  }
  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_remove()) {
    if (!this->remove().IsInitialized()) return false;
  }
  return true;
}

void MsgUserRequest::Swap(MsgUserRequest* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(data_, other->data_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserRequest::GetTypeName() const {
  return "user.MsgUserRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUserResponse::kCodeFieldNumber;
#endif  // !_MSC_VER

MsgUserResponse::MsgUserResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.MsgUserResponse)
}

void MsgUserResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  code_ = const_cast< ::ResponseCode*>(
      ::ResponseCode::internal_default_instance());
#else
  code_ = const_cast< ::ResponseCode*>(&::ResponseCode::default_instance());
#endif
}

MsgUserResponse::MsgUserResponse(const MsgUserResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.MsgUserResponse)
}

void MsgUserResponse::SharedCtor() {
  _cached_size_ = 0;
  code_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUserResponse::~MsgUserResponse() {
  // @@protoc_insertion_point(destructor:user.MsgUserResponse)
  SharedDtor();
}

void MsgUserResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete code_;
  }
}

void MsgUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MsgUserResponse& MsgUserResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

MsgUserResponse* MsgUserResponse::default_instance_ = NULL;

MsgUserResponse* MsgUserResponse::New() const {
  return new MsgUserResponse;
}

void MsgUserResponse::Clear() {
  if (has_code()) {
    if (code_ != NULL) code_->::ResponseCode::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MsgUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.MsgUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ResponseCode code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.MsgUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.MsgUserResponse)
  return false;
#undef DO_
}

void MsgUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.MsgUserResponse)
  // required .ResponseCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.MsgUserResponse)
}

int MsgUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ResponseCode code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MsgUserResponse*>(&from));
}

void MsgUserResponse::MergeFrom(const MsgUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      mutable_code()->::ResponseCode::MergeFrom(from.code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MsgUserResponse::CopyFrom(const MsgUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgUserResponse::Swap(MsgUserResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MsgUserResponse::GetTypeName() const {
  return "user.MsgUserResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int UserDetails::kEmailFieldNumber;
const int UserDetails::kNameFieldNumber;
const int UserDetails::kAddressFieldNumber;
const int UserDetails::kPhoneNumberFieldNumber;
const int UserDetails::kDescriptionFieldNumber;
const int UserDetails::kAvatarFieldNumber;
#endif  // !_MSC_VER

UserDetails::UserDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.UserDetails)
}

void UserDetails::InitAsDefaultInstance() {
}

UserDetails::UserDetails(const UserDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.UserDetails)
}

void UserDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDetails::~UserDetails() {
  // @@protoc_insertion_point(destructor:user.UserDetails)
  SharedDtor();
}

void UserDetails::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (phone_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_number_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserDetails& UserDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserDetails* UserDetails::default_instance_ = NULL;

UserDetails* UserDetails::New() const {
  return new UserDetails;
}

void UserDetails::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_phone_number()) {
      if (phone_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_number_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.UserDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone_number;
        break;
      }

      // optional bytes phone_number = 4;
      case 4: {
        if (tag == 34) {
         parse_phone_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional bytes description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.UserDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.UserDetails)
  return false;
#undef DO_
}

void UserDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.UserDetails)
  // required string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // optional bytes phone_number = 4;
  if (has_phone_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->phone_number(), output);
  }

  // optional bytes description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->description(), output);
  }

  // optional bytes avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->avatar(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.UserDetails)
}

int UserDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional bytes phone_number = 4;
    if (has_phone_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone_number());
    }

    // optional bytes description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // optional bytes avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserDetails*>(&from));
}

void UserDetails::MergeFrom(const UserDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_phone_number()) {
      set_phone_number(from.phone_number());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserDetails::CopyFrom(const UserDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserDetails::Swap(UserDetails* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(phone_number_, other->phone_number_);
    std::swap(description_, other->description_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserDetails::GetTypeName() const {
  return "user.UserDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int UserConfig::kLastStorageIdFieldNumber;
const int UserConfig::kLastGroupIdFieldNumber;
const int UserConfig::kLastItemIdFieldNumber;
const int UserConfig::kLastParameterIdFieldNumber;
#endif  // !_MSC_VER

UserConfig::UserConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.UserConfig)
}

void UserConfig::InitAsDefaultInstance() {
}

UserConfig::UserConfig(const UserConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.UserConfig)
}

void UserConfig::SharedCtor() {
  _cached_size_ = 0;
  last_storage_id_ = 0u;
  last_group_id_ = 0u;
  last_item_id_ = 0u;
  last_parameter_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserConfig::~UserConfig() {
  // @@protoc_insertion_point(destructor:user.UserConfig)
  SharedDtor();
}

void UserConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConfig& UserConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserConfig* UserConfig::default_instance_ = NULL;

UserConfig* UserConfig::New() const {
  return new UserConfig;
}

void UserConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_storage_id_, last_parameter_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.UserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_storage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_storage_id_)));
          set_has_last_storage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_group_id;
        break;
      }

      // optional uint32 last_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_last_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_group_id_)));
          set_has_last_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_item_id;
        break;
      }

      // optional uint32 last_item_id = 3;
      case 3: {
        if (tag == 24) {
         parse_last_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_item_id_)));
          set_has_last_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_parameter_id;
        break;
      }

      // optional uint32 last_parameter_id = 4;
      case 4: {
        if (tag == 32) {
         parse_last_parameter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_parameter_id_)));
          set_has_last_parameter_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.UserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.UserConfig)
  return false;
#undef DO_
}

void UserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.UserConfig)
  // optional uint32 last_storage_id = 1;
  if (has_last_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_storage_id(), output);
  }

  // optional uint32 last_group_id = 2;
  if (has_last_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_group_id(), output);
  }

  // optional uint32 last_item_id = 3;
  if (has_last_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_item_id(), output);
  }

  // optional uint32 last_parameter_id = 4;
  if (has_last_parameter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_parameter_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.UserConfig)
}

int UserConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_storage_id = 1;
    if (has_last_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_storage_id());
    }

    // optional uint32 last_group_id = 2;
    if (has_last_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_group_id());
    }

    // optional uint32 last_item_id = 3;
    if (has_last_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_item_id());
    }

    // optional uint32 last_parameter_id = 4;
    if (has_last_parameter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_parameter_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConfig*>(&from));
}

void UserConfig::MergeFrom(const UserConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_storage_id()) {
      set_last_storage_id(from.last_storage_id());
    }
    if (from.has_last_group_id()) {
      set_last_group_id(from.last_group_id());
    }
    if (from.has_last_item_id()) {
      set_last_item_id(from.last_item_id());
    }
    if (from.has_last_parameter_id()) {
      set_last_parameter_id(from.last_parameter_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserConfig::CopyFrom(const UserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConfig::IsInitialized() const {

  return true;
}

void UserConfig::Swap(UserConfig* other) {
  if (other != this) {
    std::swap(last_storage_id_, other->last_storage_id_);
    std::swap(last_group_id_, other->last_group_id_);
    std::swap(last_item_id_, other->last_item_id_);
    std::swap(last_parameter_id_, other->last_parameter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserConfig::GetTypeName() const {
  return "user.UserConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatis::kMagazineCountFieldNumber;
const int UserStatis::kTotalNumOfElementsFieldNumber;
const int UserStatis::kTotalNumOfUniqueElementsFieldNumber;
const int UserStatis::kTotalNumOfRequestsFieldNumber;
const int UserStatis::kTotalModifiedItemsFieldNumber;
const int UserStatis::kTotalAddItemsFieldNumber;
const int UserStatis::kLastLoginFieldNumber;
const int UserStatis::kRegistrationDateFieldNumber;
#endif  // !_MSC_VER

UserStatis::UserStatis()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:user.UserStatis)
}

void UserStatis::InitAsDefaultInstance() {
}

UserStatis::UserStatis(const UserStatis& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:user.UserStatis)
}

void UserStatis::SharedCtor() {
  _cached_size_ = 0;
  magazinecount_ = 0u;
  totalnumofelements_ = 0u;
  totalnumofuniqueelements_ = 0u;
  totalnumofrequests_ = 0u;
  totalmodifieditems_ = 0u;
  totaladditems_ = 0u;
  last_login_ = GOOGLE_ULONGLONG(0);
  registration_date_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatis::~UserStatis() {
  // @@protoc_insertion_point(destructor:user.UserStatis)
  SharedDtor();
}

void UserStatis::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserStatis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserStatis& UserStatis::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserStatis* UserStatis::default_instance_ = NULL;

UserStatis* UserStatis::New() const {
  return new UserStatis;
}

void UserStatis::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserStatis*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(magazinecount_, registration_date_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UserStatis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:user.UserStatis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 magazineCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magazinecount_)));
          set_has_magazinecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalNumOfElements;
        break;
      }

      // optional uint32 totalNumOfElements = 2;
      case 2: {
        if (tag == 16) {
         parse_totalNumOfElements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumofelements_)));
          set_has_totalnumofelements();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalNumOfUniqueElements;
        break;
      }

      // optional uint32 totalNumOfUniqueElements = 3;
      case 3: {
        if (tag == 24) {
         parse_totalNumOfUniqueElements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumofuniqueelements_)));
          set_has_totalnumofuniqueelements();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalNumOfRequests;
        break;
      }

      // optional uint32 totalNumOfRequests = 4;
      case 4: {
        if (tag == 32) {
         parse_totalNumOfRequests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumofrequests_)));
          set_has_totalnumofrequests();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalModifiedItems;
        break;
      }

      // optional uint32 totalModifiedItems = 5;
      case 5: {
        if (tag == 40) {
         parse_totalModifiedItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalmodifieditems_)));
          set_has_totalmodifieditems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totalAddItems;
        break;
      }

      // optional uint32 totalAddItems = 6;
      case 6: {
        if (tag == 48) {
         parse_totalAddItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaladditems_)));
          set_has_totaladditems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_last_login;
        break;
      }

      // optional fixed64 last_login = 7;
      case 7: {
        if (tag == 57) {
         parse_last_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_login_)));
          set_has_last_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_registration_date;
        break;
      }

      // optional fixed64 registration_date = 8;
      case 8: {
        if (tag == 65) {
         parse_registration_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &registration_date_)));
          set_has_registration_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:user.UserStatis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:user.UserStatis)
  return false;
#undef DO_
}

void UserStatis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:user.UserStatis)
  // optional uint32 magazineCount = 1;
  if (has_magazinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->magazinecount(), output);
  }

  // optional uint32 totalNumOfElements = 2;
  if (has_totalnumofelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalnumofelements(), output);
  }

  // optional uint32 totalNumOfUniqueElements = 3;
  if (has_totalnumofuniqueelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalnumofuniqueelements(), output);
  }

  // optional uint32 totalNumOfRequests = 4;
  if (has_totalnumofrequests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalnumofrequests(), output);
  }

  // optional uint32 totalModifiedItems = 5;
  if (has_totalmodifieditems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalmodifieditems(), output);
  }

  // optional uint32 totalAddItems = 6;
  if (has_totaladditems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totaladditems(), output);
  }

  // optional fixed64 last_login = 7;
  if (has_last_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->last_login(), output);
  }

  // optional fixed64 registration_date = 8;
  if (has_registration_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->registration_date(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:user.UserStatis)
}

int UserStatis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 magazineCount = 1;
    if (has_magazinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magazinecount());
    }

    // optional uint32 totalNumOfElements = 2;
    if (has_totalnumofelements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumofelements());
    }

    // optional uint32 totalNumOfUniqueElements = 3;
    if (has_totalnumofuniqueelements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumofuniqueelements());
    }

    // optional uint32 totalNumOfRequests = 4;
    if (has_totalnumofrequests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumofrequests());
    }

    // optional uint32 totalModifiedItems = 5;
    if (has_totalmodifieditems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalmodifieditems());
    }

    // optional uint32 totalAddItems = 6;
    if (has_totaladditems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaladditems());
    }

    // optional fixed64 last_login = 7;
    if (has_last_login()) {
      total_size += 1 + 8;
    }

    // optional fixed64 registration_date = 8;
    if (has_registration_date()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserStatis*>(&from));
}

void UserStatis::MergeFrom(const UserStatis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magazinecount()) {
      set_magazinecount(from.magazinecount());
    }
    if (from.has_totalnumofelements()) {
      set_totalnumofelements(from.totalnumofelements());
    }
    if (from.has_totalnumofuniqueelements()) {
      set_totalnumofuniqueelements(from.totalnumofuniqueelements());
    }
    if (from.has_totalnumofrequests()) {
      set_totalnumofrequests(from.totalnumofrequests());
    }
    if (from.has_totalmodifieditems()) {
      set_totalmodifieditems(from.totalmodifieditems());
    }
    if (from.has_totaladditems()) {
      set_totaladditems(from.totaladditems());
    }
    if (from.has_last_login()) {
      set_last_login(from.last_login());
    }
    if (from.has_registration_date()) {
      set_registration_date(from.registration_date());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UserStatis::CopyFrom(const UserStatis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatis::IsInitialized() const {

  return true;
}

void UserStatis::Swap(UserStatis* other) {
  if (other != this) {
    std::swap(magazinecount_, other->magazinecount_);
    std::swap(totalnumofelements_, other->totalnumofelements_);
    std::swap(totalnumofuniqueelements_, other->totalnumofuniqueelements_);
    std::swap(totalnumofrequests_, other->totalnumofrequests_);
    std::swap(totalmodifieditems_, other->totalmodifieditems_);
    std::swap(totaladditems_, other->totaladditems_);
    std::swap(last_login_, other->last_login_);
    std::swap(registration_date_, other->registration_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserStatis::GetTypeName() const {
  return "user.UserStatis";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)
